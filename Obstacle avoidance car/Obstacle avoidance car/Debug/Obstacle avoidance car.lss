
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001322  000013b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000b4  008000b4  0000140a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024c3  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2a  00000000  00000000  00003b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a3  00000000  00000000  00004865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00005d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af8  00000000  00000000  00006124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001272  00000000  00000000  00006c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <main>
      8a:	0c 94 8f 09 	jmp	0x131e	; 0x131e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
#define right_mask 0b11000011
#define back_mask 0b11110000
static uint8_t dir_mask = 0b10100101;

void APP_init(void)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	1f 92       	push	r1
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_init();
      a0:	0e 94 90 01 	call	0x320	; 0x320 <KEYPAD_init>
	
	for(int i=0;i<8;i++)
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	10 e0       	ldi	r17, 0x00	; 0
      a8:	07 c0       	rjmp	.+14     	; 0xb8 <APP_init+0x26>
	{
		MOTOR_init(i, DIO_PORTC);
      aa:	62 e0       	ldi	r22, 0x02	; 2
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	c8 01       	movw	r24, r16
      b0:	0e 94 b7 03 	call	0x76e	; 0x76e <MOTOR_init>

void APP_init(void)
{
	KEYPAD_init();
	
	for(int i=0;i<8;i++)
      b4:	0f 5f       	subi	r16, 0xFF	; 255
      b6:	1f 4f       	sbci	r17, 0xFF	; 255
      b8:	08 30       	cpi	r16, 0x08	; 8
      ba:	11 05       	cpc	r17, r1
      bc:	b4 f3       	brlt	.-20     	; 0xaa <APP_init+0x18>
	{
		MOTOR_init(i, DIO_PORTC);
	}
	DIO_setpindir(DIO_PORTB, DIO_PIN0, DIO_PIN_INPUT);
      be:	40 e0       	ldi	r20, 0x00	; 0
      c0:	60 e0       	ldi	r22, 0x00	; 0
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
	uint8_t count_5_sec=0;
	uint8_t PB0_state=0;
      c8:	19 82       	std	Y+1, r1	; 0x01
	TMR0_init();
      ca:	0e 94 56 06 	call	0xcac	; 0xcac <TMR0_init>
	
	LCD_init();
      ce:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_init>
	
	TMR0_delayms(50);
      d2:	62 e3       	ldi	r22, 0x32	; 50
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
			
	USONIC_init();
      de:	0e 94 4a 04 	call	0x894	; 0x894 <USONIC_init>
	while(KEYPAD_getpressedkey() != '1' );
      e2:	0e 94 cd 01 	call	0x39a	; 0x39a <KEYPAD_getpressedkey>
      e6:	c1 97       	sbiw	r24, 0x31	; 49
      e8:	e1 f7       	brne	.-8      	; 0xe2 <APP_init+0x50>
	LCD_goto(0,0);
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	0e 94 14 03 	call	0x628	; 0x628 <LCD_goto>
	LCD_writestr("Set def. rotation");
      f2:	84 e7       	ldi	r24, 0x74	; 116
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
	LCD_goto(1,0);
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 14 03 	call	0x628	; 0x628 <LCD_goto>
	LCD_writestr("right");
     102:	86 e8       	ldi	r24, 0x86	; 134
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
	for(int i=0;i<8;i++)
	{
		MOTOR_init(i, DIO_PORTC);
	}
	DIO_setpindir(DIO_PORTB, DIO_PIN0, DIO_PIN_INPUT);
	uint8_t count_5_sec=0;
     10a:	10 e0       	ldi	r17, 0x00	; 0
	while(KEYPAD_getpressedkey() != '1' );
	LCD_goto(0,0);
	LCD_writestr("Set def. rotation");
	LCD_goto(1,0);
	LCD_writestr("right");
	while(count_5_sec<100)
     10c:	3b c0       	rjmp	.+118    	; 0x184 <APP_init+0xf2>
	{
		while(!PB0_state)
		DIO_readpin(DIO_PORTB, DIO_PIN0, &PB0_state);
     10e:	ae 01       	movw	r20, r28
     110:	4f 5f       	subi	r20, 0xFF	; 255
     112:	5f 4f       	sbci	r21, 0xFF	; 255
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
	LCD_writestr("Set def. rotation");
	LCD_goto(1,0);
	LCD_writestr("right");
	while(count_5_sec<100)
	{
		while(!PB0_state)
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	88 23       	and	r24, r24
     120:	b1 f3       	breq	.-20     	; 0x10e <APP_init+0x7c>
     122:	0b c0       	rjmp	.+22     	; 0x13a <APP_init+0xa8>
		DIO_readpin(DIO_PORTB, DIO_PIN0, &PB0_state);
		
		while(PB0_state)
		if(PB0_state==1)
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	49 f4       	brne	.+18     	; 0x13a <APP_init+0xa8>
		{
			dir_mask = dir_mask==left_mask? right_mask:left_mask;
     128:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     12c:	9c 33       	cpi	r25, 0x3C	; 60
     12e:	11 f4       	brne	.+4      	; 0x134 <APP_init+0xa2>
     130:	93 ec       	ldi	r25, 0xC3	; 195
     132:	01 c0       	rjmp	.+2      	; 0x136 <APP_init+0xa4>
     134:	9c e3       	ldi	r25, 0x3C	; 60
     136:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	while(count_5_sec<100)
	{
		while(!PB0_state)
		DIO_readpin(DIO_PORTB, DIO_PIN0, &PB0_state);
		
		while(PB0_state)
     13a:	81 11       	cpse	r24, r1
     13c:	f3 cf       	rjmp	.-26     	; 0x124 <APP_init+0x92>
     13e:	07 c0       	rjmp	.+14     	; 0x14e <APP_init+0xbc>
		if(PB0_state==1)
		{
			dir_mask = dir_mask==left_mask? right_mask:left_mask;
		}
		while(PB0_state)
		DIO_readpin(DIO_PORTB, DIO_PIN0, &PB0_state);
     140:	ae 01       	movw	r20, r28
     142:	4f 5f       	subi	r20, 0xFF	; 255
     144:	5f 4f       	sbci	r21, 0xFF	; 255
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
		while(PB0_state)
		if(PB0_state==1)
		{
			dir_mask = dir_mask==left_mask? right_mask:left_mask;
		}
		while(PB0_state)
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	81 11       	cpse	r24, r1
     152:	f6 cf       	rjmp	.-20     	; 0x140 <APP_init+0xae>
		DIO_readpin(DIO_PORTB, DIO_PIN0, &PB0_state);
		TMR0_delayms(50);
     154:	62 e3       	ldi	r22, 0x32	; 50
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
		LCD_goto(1,0);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 14 03 	call	0x628	; 0x628 <LCD_goto>
		if(dir_mask==left_mask)
     168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     16c:	8c 33       	cpi	r24, 0x3C	; 60
     16e:	29 f4       	brne	.+10     	; 0x17a <APP_init+0xe8>
		{
			LCD_writestr("left ");
     170:	8c e8       	ldi	r24, 0x8C	; 140
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
     178:	04 c0       	rjmp	.+8      	; 0x182 <APP_init+0xf0>
		}
		else
		LCD_writestr("right");
     17a:	86 e8       	ldi	r24, 0x86	; 134
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
		count_5_sec++;
     182:	1f 5f       	subi	r17, 0xFF	; 255
	while(KEYPAD_getpressedkey() != '1' );
	LCD_goto(0,0);
	LCD_writestr("Set def. rotation");
	LCD_goto(1,0);
	LCD_writestr("right");
	while(count_5_sec<100)
     184:	14 36       	cpi	r17, 0x64	; 100
     186:	50 f2       	brcs	.-108    	; 0x11c <APP_init+0x8a>
		else
		LCD_writestr("right");
		count_5_sec++;
	}
	
}
     188:	0f 90       	pop	r0
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	08 95       	ret

00000194 <APP_start>:


void APP_start(void)
{
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t count_5_sec=0;
	uint8_t distance;
	uint8_t next_mask=0;
	uint8_t next_speed;
	if(KEYPAD_getpressedkey() == '2')
     1a6:	0e 94 cd 01 	call	0x39a	; 0x39a <KEYPAD_getpressedkey>
     1aa:	c2 97       	sbiw	r24, 0x32	; 50
     1ac:	e9 f4       	brne	.+58     	; 0x1e8 <APP_start+0x54>
	{
		count_5_sec=0;
     1ae:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
		MOTOR_off(0xff,DIO_PORTC);
     1b2:	62 e0       	ldi	r22, 0x02	; 2
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 c4 03 	call	0x788	; 0x788 <MOTOR_off>
		LCD_sendcmd(LCD_CLEAR);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
		TMR0_delayms(10);
     1c4:	6a e0       	ldi	r22, 0x0A	; 10
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
		LCD_goto(0,0);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 14 03 	call	0x628	; 0x628 <LCD_goto>
		LCD_writestr("Stop");
     1d8:	82 e9       	ldi	r24, 0x92	; 146
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
		while(KEYPAD_getpressedkey()!= '1');
     1e0:	0e 94 cd 01 	call	0x39a	; 0x39a <KEYPAD_getpressedkey>
     1e4:	c1 97       	sbiw	r24, 0x31	; 49
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <APP_start+0x4c>
	}
	USONIC_getdistance(&distance);
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 57 04 	call	0x8ae	; 0x8ae <USONIC_getdistance>
	if(distance>=70)
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	86 34       	cpi	r24, 0x46	; 70
     1f4:	50 f0       	brcs	.+20     	; 0x20a <APP_start+0x76>
	{
		if(count_5_sec<33)
     1f6:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
     1fa:	81 32       	cpi	r24, 0x21	; 33
     1fc:	c0 f5       	brcc	.+112    	; 0x26e <APP_start+0xda>
		{
			next_speed=30;
			count_5_sec++;
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__data_end>
	USONIC_getdistance(&distance);
	if(distance>=70)
	{
		if(count_5_sec<33)
		{
			next_speed=30;
     204:	0e e1       	ldi	r16, 0x1E	; 30
			count_5_sec++;
		}
		
		else
		next_speed=50;
		next_mask = frd_mask;	
     206:	1f e0       	ldi	r17, 0x0F	; 15
     208:	34 c0       	rjmp	.+104    	; 0x272 <APP_start+0xde>
	}
	else if(distance>=30)
     20a:	8e 31       	cpi	r24, 0x1E	; 30
     20c:	28 f0       	brcs	.+10     	; 0x218 <APP_start+0x84>
	{
		count_5_sec=0;
     20e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
		next_speed=30;
     212:	0e e1       	ldi	r16, 0x1E	; 30
		next_mask = frd_mask;
     214:	1f e0       	ldi	r17, 0x0F	; 15
     216:	2d c0       	rjmp	.+90     	; 0x272 <APP_start+0xde>
	}
	else if(distance>=20)
     218:	84 31       	cpi	r24, 0x14	; 20
     21a:	20 f1       	brcs	.+72     	; 0x264 <APP_start+0xd0>
	{
		count_5_sec=0;
     21c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
		MOTOR_off(0xff,DIO_PORTC);
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 c4 03 	call	0x788	; 0x788 <MOTOR_off>
		TMR0_delayms(100);
     22c:	64 e6       	ldi	r22, 0x64	; 100
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
		next_speed=30;
		next_mask=dir_mask;
     238:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
		for(int i=0;i<5;i++)
     23c:	e1 2c       	mov	r14, r1
     23e:	f1 2c       	mov	r15, r1
     240:	0b c0       	rjmp	.+22     	; 0x258 <APP_start+0xc4>
		MOTOR_control(next_mask, DIO_PORTC, next_speed);
     242:	4e e1       	ldi	r20, 0x1E	; 30
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	62 e0       	ldi	r22, 0x02	; 2
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	81 2f       	mov	r24, r17
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 c9 03 	call	0x792	; 0x792 <MOTOR_control>
		count_5_sec=0;
		MOTOR_off(0xff,DIO_PORTC);
		TMR0_delayms(100);
		next_speed=30;
		next_mask=dir_mask;
		for(int i=0;i<5;i++)
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	e8 1a       	sub	r14, r24
     256:	f8 0a       	sbc	r15, r24
     258:	85 e0       	ldi	r24, 0x05	; 5
     25a:	e8 16       	cp	r14, r24
     25c:	f1 04       	cpc	r15, r1
     25e:	8c f3       	brlt	.-30     	; 0x242 <APP_start+0xae>
	else if(distance>=20)
	{
		count_5_sec=0;
		MOTOR_off(0xff,DIO_PORTC);
		TMR0_delayms(100);
		next_speed=30;
     260:	0e e1       	ldi	r16, 0x1E	; 30
     262:	07 c0       	rjmp	.+14     	; 0x272 <APP_start+0xde>
		for(int i=0;i<5;i++)
		MOTOR_control(next_mask, DIO_PORTC, next_speed);
	}
	else
	{
		count_5_sec=0;
     264:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
		next_speed=30;
     268:	0e e1       	ldi	r16, 0x1E	; 30
		next_mask=back_mask;
     26a:	10 ef       	ldi	r17, 0xF0	; 240
     26c:	02 c0       	rjmp	.+4      	; 0x272 <APP_start+0xde>
			next_speed=30;
			count_5_sec++;
		}
		
		else
		next_speed=50;
     26e:	02 e3       	ldi	r16, 0x32	; 50
		next_mask = frd_mask;	
     270:	1f e0       	ldi	r17, 0x0F	; 15
	{
		count_5_sec=0;
		next_speed=30;
		next_mask=back_mask;
	}
	MOTOR_control(next_mask, DIO_PORTC, next_speed);
     272:	40 2f       	mov	r20, r16
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	62 e0       	ldi	r22, 0x02	; 2
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	81 2f       	mov	r24, r17
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 c9 03 	call	0x792	; 0x792 <MOTOR_control>
	LCD_sendcmd(LCD_CLEAR);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
	TMR0_delayms(10);
     288:	6a e0       	ldi	r22, 0x0A	; 10
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
	LCD_goto(0,0);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 14 03 	call	0x628	; 0x628 <LCD_goto>
	LCD_writestr("Speed:");
     29c:	87 e9       	ldi	r24, 0x97	; 151
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
	LCD_writeint(next_speed);
     2a4:	60 2f       	mov	r22, r16
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_writeint>
	LCD_writestr("% dir:");
     2b0:	8e e9       	ldi	r24, 0x9E	; 158
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
	switch (next_mask)
     2b8:	1c 33       	cpi	r17, 0x3C	; 60
     2ba:	c1 f0       	breq	.+48     	; 0x2ec <APP_start+0x158>
     2bc:	18 f4       	brcc	.+6      	; 0x2c4 <APP_start+0x130>
     2be:	1f 30       	cpi	r17, 0x0F	; 15
     2c0:	31 f0       	breq	.+12     	; 0x2ce <APP_start+0x13a>
     2c2:	18 c0       	rjmp	.+48     	; 0x2f4 <APP_start+0x160>
     2c4:	13 3c       	cpi	r17, 0xC3	; 195
     2c6:	69 f0       	breq	.+26     	; 0x2e2 <APP_start+0x14e>
     2c8:	10 3f       	cpi	r17, 0xF0	; 240
     2ca:	31 f0       	breq	.+12     	; 0x2d8 <APP_start+0x144>
     2cc:	13 c0       	rjmp	.+38     	; 0x2f4 <APP_start+0x160>
	{
		case frd_mask:
		LCD_writestr("F");
     2ce:	85 ea       	ldi	r24, 0xA5	; 165
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
		break;
     2d6:	0e c0       	rjmp	.+28     	; 0x2f4 <APP_start+0x160>
		case back_mask:
		LCD_writestr("B");
     2d8:	87 ea       	ldi	r24, 0xA7	; 167
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
		break;
     2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <APP_start+0x160>
		case right_mask:
		LCD_writestr("R");
     2e2:	89 ea       	ldi	r24, 0xA9	; 169
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
		break;
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <APP_start+0x160>
		case left_mask:
		LCD_writestr("L");
     2ec:	8b ea       	ldi	r24, 0xAB	; 171
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
		break;
	}
	LCD_goto(1,0);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 14 03 	call	0x628	; 0x628 <LCD_goto>
	LCD_writestr("Dist.:");
     2fc:	8d ea       	ldi	r24, 0xAD	; 173
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 01 03 	call	0x602	; 0x602 <LCD_writestr>
	LCD_writeint(distance);
     304:	69 81       	ldd	r22, Y+1	; 0x01
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_writeint>
	
	
     310:	0f 90       	pop	r0
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	08 95       	ret

00000320 <KEYPAD_init>:
        {BUTTON7, BUTTON8, BUTTON9}};

void KEYPAD_init(void)
{
  /* Set Columns direction to Output */
  DIO_setpindir(DIO_PORTB, COL_1, DIO_PIN_OUTPUT);
     320:	41 e0       	ldi	r20, 0x01	; 1
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
  DIO_setpindir(DIO_PORTB, COL_2, DIO_PIN_OUTPUT);
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	66 e0       	ldi	r22, 0x06	; 6
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
  DIO_setpindir(DIO_PORTB, COL_3, DIO_PIN_OUTPUT);
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	67 e0       	ldi	r22, 0x07	; 7
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>

  /* Set Rows direction to Input */
  DIO_setpindir(DIO_PORTB, ROW_1, DIO_PIN_INPUT);
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	62 e0       	ldi	r22, 0x02	; 2
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
  DIO_setpindir(DIO_PORTB, ROW_2, DIO_PIN_INPUT);
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	63 e0       	ldi	r22, 0x03	; 3
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
  DIO_setpindir(DIO_PORTB, ROW_3, DIO_PIN_INPUT);
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	64 e0       	ldi	r22, 0x04	; 4
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>

  /*Set Column Initial Values to 1 */
  DIO_setpinvalue(DIO_PORTB, COL_1, DIO_PIN_HIGH);
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	65 e0       	ldi	r22, 0x05	; 5
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
  DIO_setpinvalue(DIO_PORTB, COL_2, DIO_PIN_HIGH);
     366:	41 e0       	ldi	r20, 0x01	; 1
     368:	66 e0       	ldi	r22, 0x06	; 6
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
  DIO_setpinvalue(DIO_PORTB, COL_3, DIO_PIN_HIGH);
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	67 e0       	ldi	r22, 0x07	; 7
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>

  /* Enable Pull Up Resistors at Input Rows */
  DIO_setpinvalue(DIO_PORTB, ROW_1, DIO_PIN_HIGH);
     37a:	41 e0       	ldi	r20, 0x01	; 1
     37c:	62 e0       	ldi	r22, 0x02	; 2
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
  DIO_setpinvalue(DIO_PORTB, ROW_2, DIO_PIN_HIGH);
     384:	41 e0       	ldi	r20, 0x01	; 1
     386:	63 e0       	ldi	r22, 0x03	; 3
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
  DIO_setpinvalue(DIO_PORTB, ROW_3, DIO_PIN_HIGH);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	64 e0       	ldi	r22, 0x04	; 4
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     398:	08 95       	ret

0000039a <KEYPAD_getpressedkey>:
}

uint8_t KEYPAD_getpressedkey(void)
{
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62

  uint8_t colValue;
  
  for (uint8_t counter_col = 0; counter_col < KEYPADSIZE; counter_col++)
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <KEYPAD_getpressedkey+0x2e>
  {
	  // set current pin in ColumnArray HIGH
	  DIO_setpinvalue(DIO_PORTB, Col_Arr[counter_col], DIO_PIN_HIGH);
     3b4:	e1 2f       	mov	r30, r17
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	e3 59       	subi	r30, 0x93	; 147
     3ba:	ff 4f       	sbci	r31, 0xFF	; 255
     3bc:	41 e0       	ldi	r20, 0x01	; 1
     3be:	60 81       	ld	r22, Z
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
uint8_t KEYPAD_getpressedkey(void)
{

  uint8_t colValue;
  
  for (uint8_t counter_col = 0; counter_col < KEYPADSIZE; counter_col++)
     3c6:	1f 5f       	subi	r17, 0xFF	; 255
     3c8:	13 30       	cpi	r17, 0x03	; 3
     3ca:	a0 f3       	brcs	.-24     	; 0x3b4 <KEYPAD_getpressedkey+0x1a>
     3cc:	00 e0       	ldi	r16, 0x00	; 0
     3ce:	3b c0       	rjmp	.+118    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>

  // Scan all keypad columns
for (uint8_t counter_col = 0; counter_col < KEYPADSIZE; counter_col++)
  {
    // set current column pin low to test all row pins to find out which button has been pressed
    DIO_setpinvalue(DIO_PORTB, Col_Arr[counter_col], DIO_PIN_LOW);
     3d0:	c0 2e       	mov	r12, r16
     3d2:	d1 2c       	mov	r13, r1
     3d4:	f6 01       	movw	r30, r12
     3d6:	e3 59       	subi	r30, 0x93	; 147
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	60 81       	ld	r22, Z
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	
	//scan and test all keypad row pins
     for (uint8_t counter_row = 0; counter_row < KEYPADSIZE; counter_row++)
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	24 c0       	rjmp	.+72     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
    {
      // check row value if it is 0 then this column and row is connected
      DIO_readpin(DIO_PORTB, Row_Arr[counter_row], &colValue);
     3e8:	e1 2e       	mov	r14, r17
     3ea:	f1 2c       	mov	r15, r1
     3ec:	f7 01       	movw	r30, r14
     3ee:	e6 59       	subi	r30, 0x96	; 150
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	ae 01       	movw	r20, r28
     3f4:	4f 5f       	subi	r20, 0xFF	; 255
     3f6:	5f 4f       	sbci	r21, 0xFF	; 255
     3f8:	60 81       	ld	r22, Z
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
      if (colValue == 0)
     400:	99 81       	ldd	r25, Y+1	; 0x01
     402:	91 11       	cpse	r25, r1
     404:	14 c0       	rjmp	.+40     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
      {
        // Return pressed button value
        DIO_setpinvalue(DIO_PORTB, Row_Arr[counter_row], DIO_PIN_HIGH);
     406:	f7 01       	movw	r30, r14
     408:	e6 59       	subi	r30, 0x96	; 150
     40a:	ff 4f       	sbci	r31, 0xFF	; 255
     40c:	41 e0       	ldi	r20, 0x01	; 1
     40e:	60 81       	ld	r22, Z
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
        return Button_Arr[counter_row][counter_col];
     416:	c7 01       	movw	r24, r14
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	8e 0d       	add	r24, r14
     41e:	9f 1d       	adc	r25, r15
     420:	8f 59       	subi	r24, 0x9F	; 159
     422:	9f 4f       	sbci	r25, 0xFF	; 255
     424:	fc 01       	movw	r30, r24
     426:	ec 0d       	add	r30, r12
     428:	fd 1d       	adc	r31, r13
     42a:	80 81       	ld	r24, Z
     42c:	0f c0       	rjmp	.+30     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
  {
    // set current column pin low to test all row pins to find out which button has been pressed
    DIO_setpinvalue(DIO_PORTB, Col_Arr[counter_col], DIO_PIN_LOW);
	
	//scan and test all keypad row pins
     for (uint8_t counter_row = 0; counter_row < KEYPADSIZE; counter_row++)
     42e:	1f 5f       	subi	r17, 0xFF	; 255
     430:	13 30       	cpi	r17, 0x03	; 3
     432:	d0 f2       	brcs	.-76     	; 0x3e8 <KEYPAD_getpressedkey+0x4e>
        DIO_setpinvalue(DIO_PORTB, Row_Arr[counter_row], DIO_PIN_HIGH);
        return Button_Arr[counter_row][counter_col];
      }
    }
    // set current column pin HIGH again
    DIO_setpinvalue(DIO_PORTB, Col_Arr[counter_col], DIO_PIN_HIGH);
     434:	f6 01       	movw	r30, r12
     436:	e3 59       	subi	r30, 0x93	; 147
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	60 81       	ld	r22, Z
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	  // set current pin in ColumnArray HIGH
	  DIO_setpinvalue(DIO_PORTB, Col_Arr[counter_col], DIO_PIN_HIGH);
  }

  // Scan all keypad columns
for (uint8_t counter_col = 0; counter_col < KEYPADSIZE; counter_col++)
     444:	0f 5f       	subi	r16, 0xFF	; 255
     446:	03 30       	cpi	r16, 0x03	; 3
     448:	18 f2       	brcs	.-122    	; 0x3d0 <KEYPAD_getpressedkey+0x36>
    // set current column pin HIGH again
    DIO_setpinvalue(DIO_PORTB, Col_Arr[counter_col], DIO_PIN_HIGH);
  }

  // Report no Button pressed
  return 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
}
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	08 95       	ret

00000460 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     460:	cf 93       	push	r28
     462:	c8 2f       	mov	r28, r24
     464:	0e 94 56 06 	call	0xcac	; 0xcac <TMR0_init>
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	62 e0       	ldi	r22, 0x02	; 2
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	63 e0       	ldi	r22, 0x03	; 3
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     486:	8b b3       	in	r24, 0x1b	; 27
     488:	9c 2f       	mov	r25, r28
     48a:	90 7f       	andi	r25, 0xF0	; 240
     48c:	8f 70       	andi	r24, 0x0F	; 15
     48e:	89 2b       	or	r24, r25
     490:	8b bb       	out	0x1b, r24	; 27
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	63 e0       	ldi	r22, 0x03	; 3
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	63 e0       	ldi	r22, 0x03	; 3
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     4b2:	20 e1       	ldi	r18, 0x10	; 16
     4b4:	c2 9f       	mul	r28, r18
     4b6:	c0 01       	movw	r24, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	9b b3       	in	r25, 0x1b	; 27
     4bc:	9f 70       	andi	r25, 0x0F	; 15
     4be:	89 2b       	or	r24, r25
     4c0:	8b bb       	out	0x1b, r24	; 27
     4c2:	41 e0       	ldi	r20, 0x01	; 1
     4c4:	63 e0       	ldi	r22, 0x03	; 3
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     4cc:	61 e0       	ldi	r22, 0x01	; 1
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	63 e0       	ldi	r22, 0x03	; 3
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     4e2:	65 e0       	ldi	r22, 0x05	; 5
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <LCD_init>:
     4f2:	0e 94 56 06 	call	0xcac	; 0xcac <TMR0_init>
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	62 e0       	ldi	r22, 0x02	; 2
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	63 e0       	ldi	r22, 0x03	; 3
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	64 e0       	ldi	r22, 0x04	; 4
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	65 e0       	ldi	r22, 0x05	; 5
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	66 e0       	ldi	r22, 0x06	; 6
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     532:	41 e0       	ldi	r20, 0x01	; 1
     534:	67 e0       	ldi	r22, 0x07	; 7
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
     53c:	64 e1       	ldi	r22, 0x14	; 20
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     548:	83 e3       	ldi	r24, 0x33	; 51
     54a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     54e:	82 e3       	ldi	r24, 0x32	; 50
     550:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     554:	88 e2       	ldi	r24, 0x28	; 40
     556:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     55a:	8c e0       	ldi	r24, 0x0C	; 12
     55c:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     560:	86 e0       	ldi	r24, 0x06	; 6
     562:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     572:	08 95       	ret

00000574 <LCD_writechar>:
     574:	cf 93       	push	r28
     576:	c8 2f       	mov	r28, r24
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	62 e0       	ldi	r22, 0x02	; 2
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	63 e0       	ldi	r22, 0x03	; 3
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     596:	8b b3       	in	r24, 0x1b	; 27
     598:	9c 2f       	mov	r25, r28
     59a:	90 7f       	andi	r25, 0xF0	; 240
     59c:	8f 70       	andi	r24, 0x0F	; 15
     59e:	89 2b       	or	r24, r25
     5a0:	8b bb       	out	0x1b, r24	; 27
     5a2:	41 e0       	ldi	r20, 0x01	; 1
     5a4:	63 e0       	ldi	r22, 0x03	; 3
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	63 e0       	ldi	r22, 0x03	; 3
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     5c2:	20 e1       	ldi	r18, 0x10	; 16
     5c4:	c2 9f       	mul	r28, r18
     5c6:	c0 01       	movw	r24, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	9b b3       	in	r25, 0x1b	; 27
     5cc:	9f 70       	andi	r25, 0x0F	; 15
     5ce:	89 2b       	or	r24, r25
     5d0:	8b bb       	out	0x1b, r24	; 27
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	63 e0       	ldi	r22, 0x03	; 3
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
     5f2:	65 e0       	ldi	r22, 0x05	; 5
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <LCD_writestr>:
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	8c 01       	movw	r16, r24
     60a:	c0 e0       	ldi	r28, 0x00	; 0
     60c:	03 c0       	rjmp	.+6      	; 0x614 <LCD_writestr+0x12>
     60e:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_writechar>
     612:	cf 5f       	subi	r28, 0xFF	; 255
     614:	f8 01       	movw	r30, r16
     616:	ec 0f       	add	r30, r28
     618:	f1 1d       	adc	r31, r1
     61a:	80 81       	ld	r24, Z
     61c:	81 11       	cpse	r24, r1
     61e:	f7 cf       	rjmp	.-18     	; 0x60e <LCD_writestr+0xc>
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <LCD_goto>:
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	00 d0       	rcall	.+0      	; 0x62e <LCD_goto+0x6>
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	90 e8       	ldi	r25, 0x80	; 128
     634:	99 83       	std	Y+1, r25	; 0x01
     636:	90 ec       	ldi	r25, 0xC0	; 192
     638:	9a 83       	std	Y+2, r25	; 0x02
     63a:	e1 e0       	ldi	r30, 0x01	; 1
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	e8 0f       	add	r30, r24
     644:	f1 1d       	adc	r31, r1
     646:	80 81       	ld	r24, Z
     648:	86 0f       	add	r24, r22
     64a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_sendcmd>
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	2a 97       	sbiw	r28, 0x0a	; 10
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     66e:	99 23       	and	r25, r25
     670:	dc f5       	brge	.+118    	; 0x6e8 <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     672:	90 95       	com	r25
     674:	80 95       	com	r24
     676:	70 95       	com	r23
     678:	61 95       	neg	r22
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	8f 4f       	sbci	r24, 0xFF	; 255
     67e:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     680:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     682:	13 c0       	rjmp	.+38     	; 0x6aa <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     684:	2a e0       	ldi	r18, 0x0A	; 10
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	0e 94 4e 09 	call	0x129c	; 0x129c <__divmodsi4>
     690:	e1 e0       	ldi	r30, 0x01	; 1
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	ec 0f       	add	r30, r28
     696:	fd 1f       	adc	r31, r29
     698:	e1 0f       	add	r30, r17
     69a:	f1 1d       	adc	r31, r1
     69c:	60 5d       	subi	r22, 0xD0	; 208
     69e:	60 83       	st	Z, r22
			s32_a_num /= 10;
     6a0:	62 2f       	mov	r22, r18
     6a2:	73 2f       	mov	r23, r19
     6a4:	84 2f       	mov	r24, r20
     6a6:	95 2f       	mov	r25, r21
			i++;
     6a8:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     6aa:	16 16       	cp	r1, r22
     6ac:	17 06       	cpc	r1, r23
     6ae:	18 06       	cpc	r1, r24
     6b0:	19 06       	cpc	r1, r25
     6b2:	44 f3       	brlt	.-48     	; 0x684 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     6b4:	e1 e0       	ldi	r30, 0x01	; 1
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	ec 0f       	add	r30, r28
     6ba:	fd 1f       	adc	r31, r29
     6bc:	e1 0f       	add	r30, r17
     6be:	f1 1d       	adc	r31, r1
     6c0:	8d e2       	ldi	r24, 0x2D	; 45
     6c2:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     6c4:	1f 5f       	subi	r17, 0xFF	; 255
     6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     6c8:	e1 2f       	mov	r30, r17
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	8c 0f       	add	r24, r28
     6d4:	9d 1f       	adc	r25, r29
     6d6:	e8 0f       	add	r30, r24
     6d8:	f9 1f       	adc	r31, r25
     6da:	80 81       	ld	r24, Z
     6dc:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     6e0:	11 50       	subi	r17, 0x01	; 1
     6e2:	11 11       	cpse	r17, r1
     6e4:	f1 cf       	rjmp	.-30     	; 0x6c8 <LCD_writeint+0x70>
     6e6:	39 c0       	rjmp	.+114    	; 0x75a <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     6e8:	61 15       	cp	r22, r1
     6ea:	71 05       	cpc	r23, r1
     6ec:	81 05       	cpc	r24, r1
     6ee:	91 05       	cpc	r25, r1
     6f0:	21 f4       	brne	.+8      	; 0x6fa <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     6f2:	80 e3       	ldi	r24, 0x30	; 48
     6f4:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_writechar>
     6f8:	30 c0       	rjmp	.+96     	; 0x75a <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     6fa:	16 16       	cp	r1, r22
     6fc:	17 06       	cpc	r1, r23
     6fe:	18 06       	cpc	r1, r24
     700:	19 06       	cpc	r1, r25
     702:	ac f0       	brlt	.+42     	; 0x72e <LCD_writeint+0xd6>
     704:	2a c0       	rjmp	.+84     	; 0x75a <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     706:	2a e0       	ldi	r18, 0x0A	; 10
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	0e 94 4e 09 	call	0x129c	; 0x129c <__divmodsi4>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ec 0f       	add	r30, r28
     718:	fd 1f       	adc	r31, r29
     71a:	e1 0f       	add	r30, r17
     71c:	f1 1d       	adc	r31, r1
     71e:	60 5d       	subi	r22, 0xD0	; 208
     720:	60 83       	st	Z, r22
			s32_a_num /= 10;
     722:	62 2f       	mov	r22, r18
     724:	73 2f       	mov	r23, r19
     726:	84 2f       	mov	r24, r20
     728:	95 2f       	mov	r25, r21
			i++;
     72a:	1f 5f       	subi	r17, 0xFF	; 255
     72c:	01 c0       	rjmp	.+2      	; 0x730 <LCD_writeint+0xd8>
     72e:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     730:	16 16       	cp	r1, r22
     732:	17 06       	cpc	r1, r23
     734:	18 06       	cpc	r1, r24
     736:	19 06       	cpc	r1, r25
     738:	34 f3       	brlt	.-52     	; 0x706 <LCD_writeint+0xae>
     73a:	0d c0       	rjmp	.+26     	; 0x756 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     73c:	e1 2f       	mov	r30, r17
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	31 97       	sbiw	r30, 0x01	; 1
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	8c 0f       	add	r24, r28
     748:	9d 1f       	adc	r25, r29
     74a:	e8 0f       	add	r30, r24
     74c:	f9 1f       	adc	r31, r25
     74e:	80 81       	ld	r24, Z
     750:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     754:	11 50       	subi	r17, 0x01	; 1
     756:	11 11       	cpse	r17, r1
     758:	f1 cf       	rjmp	.-30     	; 0x73c <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     75a:	2a 96       	adiw	r28, 0x0a	; 10
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <MOTOR_init>:
/*Description: Initialize a motor pin as an output                      */
/*@param u8_a_pinNumber pin number                                      */
/*@param u8_a_portNumber port number                                    */
/************************************************************************/
err_state MOTOR_init(uint8_t u8_a_pinNumber, uint8_t u8_a_portNumber)
{
     76e:	98 2f       	mov	r25, r24
     770:	86 2f       	mov	r24, r22
     DIO_setpindir(u8_a_portNumber, u8_a_pinNumber,DIO_PIN_OUTPUT);
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	69 2f       	mov	r22, r25
     776:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
    return SUCCESS;
}
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	08 95       	ret

0000077e <MOTOR_on>:
/*@param u8_a_mask mask for the pins                                    */
/*@param u8_a_portNumber port number                                    */
/************************************************************************/
err_state MOTOR_on(uint8_t u8_a_mask, uint8_t u8_a_portNumber)
{
    DIO_array_write(u8_a_mask,u8_a_portNumber,DIO_PIN_HIGH);
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_array_write>
    return SUCCESS;
}
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	08 95       	ret

00000788 <MOTOR_off>:
/*@param u8_a_mask u8_a_mask for the pins                               */
/*@param u8_a_portNumber port number                                    */
/************************************************************************/
err_state MOTOR_off(uint8_t u8_a_mask, uint8_t u8_a_portNumber)
{
    DIO_array_write(u8_a_mask,u8_a_portNumber,DIO_PIN_LOW);
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_array_write>
    return SUCCESS;
}
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	08 95       	ret

00000792 <MOTOR_control>:
/*@param u8_a_portNumber port number                                                                                                                                         */
/*@param f_a_speedPercentage duty cycle                                                                                                                                      */
/*@param f_a_tPeriod T-Period                                                                                                                                                */
/*****************************************************************************************************************************************************************************/
err_state MOTOR_control(uint8_t u8_a_mask, uint8_t u8_a_portNumber,float f_a_speedPercentage)
{
     792:	8f 92       	push	r8
     794:	9f 92       	push	r9
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	c8 2f       	mov	r28, r24
     7a8:	d6 2f       	mov	r29, r22
     7aa:	69 01       	movw	r12, r18
     7ac:	7a 01       	movw	r14, r20
    double d_l_onTime,d_l_offTime = 0;
    
    //error handling : the required output deviates depending on how close to the min and max values of the motor speed and also depending on the T-Period
    if(f_a_speedPercentage>50)//checks if the duty cycle is higher than 50%
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	48 e4       	ldi	r20, 0x48	; 72
     7b4:	52 e4       	ldi	r21, 0x42	; 66
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 b8 08 	call	0x1170	; 0x1170 <__gesf2>
     7be:	18 16       	cp	r1, r24
     7c0:	cc f4       	brge	.+50     	; 0x7f4 <MOTOR_control+0x62>
    {
        f_a_speedPercentage = f_a_speedPercentage+((f_a_speedPercentage-50)*d_g_err);//adds 4.2% of the difference between the required duty cycle and 50% duty cycle
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	48 e4       	ldi	r20, 0x48	; 72
     7c8:	52 e4       	ldi	r21, 0x42	; 66
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	0e 94 15 07 	call	0xe2a	; 0xe2a <__subsf3>
     7d2:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <d_g_err>
     7d6:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <d_g_err+0x1>
     7da:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <d_g_err+0x2>
     7de:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <d_g_err+0x3>
     7e2:	0e 94 bd 08 	call	0x117a	; 0x117a <__mulsf3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	c7 01       	movw	r24, r14
     7ec:	b6 01       	movw	r22, r12
     7ee:	0e 94 16 07 	call	0xe2c	; 0xe2c <__addsf3>
     7f2:	18 c0       	rjmp	.+48     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
    }
    
    else//the required duty cycle is 50% or lower
    {
        f_a_speedPercentage = f_a_speedPercentage-((50-f_a_speedPercentage)*d_g_err);//subtracts 4.2% of the difference between the required duty cycle and 50% duty cycle
     7f4:	a7 01       	movw	r20, r14
     7f6:	96 01       	movw	r18, r12
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	88 e4       	ldi	r24, 0x48	; 72
     7fe:	92 e4       	ldi	r25, 0x42	; 66
     800:	0e 94 15 07 	call	0xe2a	; 0xe2a <__subsf3>
     804:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <d_g_err>
     808:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <d_g_err+0x1>
     80c:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <d_g_err+0x2>
     810:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <d_g_err+0x3>
     814:	0e 94 bd 08 	call	0x117a	; 0x117a <__mulsf3>
     818:	9b 01       	movw	r18, r22
     81a:	ac 01       	movw	r20, r24
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 15 07 	call	0xe2a	; 0xe2a <__subsf3>
    }
    
    d_l_onTime = (double) (f_a_speedPercentage/100.0)*f_g_tPeriod;//sets the duty cycle 
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	48 ec       	ldi	r20, 0xC8	; 200
     82a:	52 e4       	ldi	r21, 0x42	; 66
     82c:	0e 94 82 07 	call	0xf04	; 0xf04 <__divsf3>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	48 ec       	ldi	r20, 0xC8	; 200
     836:	52 e4       	ldi	r21, 0x42	; 66
     838:	0e 94 bd 08 	call	0x117a	; 0x117a <__mulsf3>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
    d_l_offTime = f_g_tPeriod - d_l_onTime;//gets the off time
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	88 ec       	ldi	r24, 0xC8	; 200
     84a:	92 e4       	ldi	r25, 0x42	; 66
     84c:	0e 94 15 07 	call	0xe2a	; 0xe2a <__subsf3>
     850:	4b 01       	movw	r8, r22
     852:	5c 01       	movw	r10, r24
          
    MOTOR_on(u8_a_mask,u8_a_portNumber);//motors on
     854:	6d 2f       	mov	r22, r29
     856:	8c 2f       	mov	r24, r28
     858:	0e 94 bf 03 	call	0x77e	; 0x77e <MOTOR_on>
    TMR0_delayms(d_l_onTime);//busy loop until the on time is met
     85c:	c7 01       	movw	r24, r14
     85e:	b6 01       	movw	r22, r12
     860:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fixunssfsi>
     864:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
        
    MOTOR_off(u8_a_mask,u8_a_portNumber);//motors off	
     868:	6d 2f       	mov	r22, r29
     86a:	8c 2f       	mov	r24, r28
     86c:	0e 94 c4 03 	call	0x788	; 0x788 <MOTOR_off>
    TMR0_delayms(d_l_offTime);////busy loop until the off time is met
     870:	c5 01       	movw	r24, r10
     872:	b4 01       	movw	r22, r8
     874:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fixunssfsi>
     878:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TMR0_delayms>
        
    return SUCCESS;
}
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <USONIC_init>:
#include "../../MCAL/timer1/timer1_interface.h"
#include "../../MCAL/dio/DIO_interface.h"

void USONIC_init(void)
{
	DIO_setpindir(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT);
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
	DIO_setpindir(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	0e 94 de 04 	call	0x9bc	; 0x9bc <DIO_setpindir>
	TMR1_init();
     8a8:	0e 94 ee 06 	call	0xddc	; 0xddc <TMR1_init>
     8ac:	08 95       	ret

000008ae <USONIC_getdistance>:
}

EN_USONIC_STATUS USONIC_getdistance(uint8_t *u8_a_distance)
{
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <USONIC_getdistance+0xa>
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	8c 01       	movw	r16, r24
	
	uint8_t echo=0;
     8c0:	19 82       	std	Y+1, r1	; 0x01
	uint16t duration_ticks=0;
     8c2:	1b 82       	std	Y+3, r1	; 0x03
     8c4:	1a 82       	std	Y+2, r1	; 0x02
	double duration_us=0;
	int distance=0;
	
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_HIGH);
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	TMR0_delaymicos(10);
     8d0:	6a e0       	ldi	r22, 0x0A	; 10
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 b9 06 	call	0xd72	; 0xd72 <TMR0_delaymicos>
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_LOW);
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
     8e6:	ae 01       	movw	r20, r28
     8e8:	4f 5f       	subi	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	62 e0       	ldi	r22, 0x02	; 2
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
	DIO_setpinvalue(DIO_PORTB, DIO_PIN7, DIO_PIN_HIGH);
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	67 e0       	ldi	r22, 0x07	; 7
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	while(echo)
     8fe:	07 c0       	rjmp	.+14     	; 0x90e <USONIC_getdistance+0x60>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
     900:	ae 01       	movw	r20, r28
     902:	4f 5f       	subi	r20, 0xFF	; 255
     904:	5f 4f       	sbci	r21, 0xFF	; 255
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_HIGH);
	TMR0_delaymicos(10);
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_LOW);
	DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	DIO_setpinvalue(DIO_PORTB, DIO_PIN7, DIO_PIN_HIGH);
	while(echo)
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	81 11       	cpse	r24, r1
     912:	f6 cf       	rjmp	.-20     	; 0x900 <USONIC_getdistance+0x52>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	TMR1_start();
     914:	0e 94 01 07 	call	0xe02	; 0xe02 <TMR1_start>
	while(!echo)
     918:	07 c0       	rjmp	.+14     	; 0x928 <USONIC_getdistance+0x7a>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
     91a:	ae 01       	movw	r20, r28
     91c:	4f 5f       	subi	r20, 0xFF	; 255
     91e:	5f 4f       	sbci	r21, 0xFF	; 255
     920:	62 e0       	ldi	r22, 0x02	; 2
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
	while(echo)
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	TMR1_start();
	while(!echo)
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	88 23       	and	r24, r24
     92c:	b1 f3       	breq	.-20     	; 0x91a <USONIC_getdistance+0x6c>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	DIO_setpinvalue(DIO_PORTB, DIO_PIN5, DIO_PIN_HIGH);
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	65 e0       	ldi	r22, 0x05	; 5
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	//TMR1_start();
	TMR1_setvalue(0);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 12 07 	call	0xe24	; 0xe24 <TMR1_setvalue>
	while(echo)
     940:	07 c0       	rjmp	.+14     	; 0x950 <USONIC_getdistance+0xa2>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
     942:	ae 01       	movw	r20, r28
     944:	4f 5f       	subi	r20, 0xFF	; 255
     946:	5f 4f       	sbci	r21, 0xFF	; 255
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <DIO_readpin>
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	DIO_setpinvalue(DIO_PORTB, DIO_PIN5, DIO_PIN_HIGH);
	//TMR1_start();
	TMR1_setvalue(0);
	while(echo)
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	81 11       	cpse	r24, r1
     954:	f6 cf       	rjmp	.-20     	; 0x942 <USONIC_getdistance+0x94>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	
	TMR1_getvalue(&duration_ticks);
     956:	ce 01       	movw	r24, r28
     958:	02 96       	adiw	r24, 0x02	; 2
     95a:	0e 94 0c 07 	call	0xe18	; 0xe18 <TMR1_getvalue>
	DIO_setpinvalue(DIO_PORTB, DIO_PIN6, DIO_PIN_HIGH);
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	66 e0       	ldi	r22, 0x06	; 6
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 5d 05 	call	0xaba	; 0xaba <DIO_setpinvalue>
	//TMR1_stop();
	duration_us = duration_ticks *8;
     968:	6a 81       	ldd	r22, Y+2	; 0x02
     96a:	7b 81       	ldd	r23, Y+3	; 0x03
     96c:	66 0f       	add	r22, r22
     96e:	77 1f       	adc	r23, r23
     970:	66 0f       	add	r22, r22
     972:	77 1f       	adc	r23, r23
     974:	66 0f       	add	r22, r22
     976:	77 1f       	adc	r23, r23
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 2a 08 	call	0x1054	; 0x1054 <__floatunsisf>
	distance = duration_us * 0.017;
     980:	26 e9       	ldi	r18, 0x96	; 150
     982:	33 e4       	ldi	r19, 0x43	; 67
     984:	4b e8       	ldi	r20, 0x8B	; 139
     986:	5c e3       	ldi	r21, 0x3C	; 60
     988:	0e 94 bd 08 	call	0x117a	; 0x117a <__mulsf3>
     98c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__fixsfsi>
	*u8_a_distance = +distance>255? 255:distance;
     990:	6f 3f       	cpi	r22, 0xFF	; 255
     992:	71 05       	cpc	r23, r1
     994:	19 f0       	breq	.+6      	; 0x99c <USONIC_getdistance+0xee>
     996:	14 f0       	brlt	.+4      	; 0x99c <USONIC_getdistance+0xee>
     998:	6f ef       	ldi	r22, 0xFF	; 255
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	f8 01       	movw	r30, r16
     99e:	60 83       	st	Z, r22
	
	return USONIC_SUCCESS;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <main>:



int main(void)
{	
	APP_init();
     9b2:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	while (1) 
    {
		APP_start();
     9b6:	0e 94 ca 00 	call	0x194	; 0x194 <APP_start>
     9ba:	fd cf       	rjmp	.-6      	; 0x9b6 <main+0x4>

000009bc <DIO_setpindir>:
		en_a_portvaluestatus = NOT_VALID_VALUE ;
		break;
	}
	
	return en_a_portvaluestatus ; /** RETURN THE FINAL STATUS **/ 
}
     9bc:	44 23       	and	r20, r20
     9be:	19 f0       	breq	.+6      	; 0x9c6 <DIO_setpindir+0xa>
     9c0:	41 30       	cpi	r20, 0x01	; 1
     9c2:	e9 f1       	breq	.+122    	; 0xa3e <DIO_setpindir+0x82>
     9c4:	74 c0       	rjmp	.+232    	; 0xaae <DIO_setpindir+0xf2>
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	99 f0       	breq	.+38     	; 0x9f0 <DIO_setpindir+0x34>
     9ca:	28 f0       	brcs	.+10     	; 0x9d6 <DIO_setpindir+0x1a>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	e9 f0       	breq	.+58     	; 0xa0a <DIO_setpindir+0x4e>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	41 f1       	breq	.+80     	; 0xa24 <DIO_setpindir+0x68>
     9d4:	6e c0       	rjmp	.+220    	; 0xab2 <DIO_setpindir+0xf6>
     9d6:	2a b3       	in	r18, 0x1a	; 26
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_setpindir+0x26>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	6a 95       	dec	r22
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_setpindir+0x22>
     9e6:	80 95       	com	r24
     9e8:	82 23       	and	r24, r18
     9ea:	8a bb       	out	0x1a, r24	; 26
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	08 95       	ret
     9f0:	27 b3       	in	r18, 0x17	; 23
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_setpindir+0x40>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	6a 95       	dec	r22
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_setpindir+0x3c>
     a00:	80 95       	com	r24
     a02:	82 23       	and	r24, r18
     a04:	87 bb       	out	0x17, r24	; 23
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
     a0a:	24 b3       	in	r18, 0x14	; 20
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <DIO_setpindir+0x5a>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	6a 95       	dec	r22
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <DIO_setpindir+0x56>
     a1a:	80 95       	com	r24
     a1c:	82 23       	and	r24, r18
     a1e:	84 bb       	out	0x14, r24	; 20
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	08 95       	ret
     a24:	21 b3       	in	r18, 0x11	; 17
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_setpindir+0x74>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	6a 95       	dec	r22
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_setpindir+0x70>
     a34:	80 95       	com	r24
     a36:	82 23       	and	r24, r18
     a38:	81 bb       	out	0x11, r24	; 17
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	08 95       	ret
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	91 f0       	breq	.+36     	; 0xa66 <DIO_setpindir+0xaa>
     a42:	28 f0       	brcs	.+10     	; 0xa4e <DIO_setpindir+0x92>
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	d9 f0       	breq	.+54     	; 0xa7e <DIO_setpindir+0xc2>
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	29 f1       	breq	.+74     	; 0xa96 <DIO_setpindir+0xda>
     a4c:	34 c0       	rjmp	.+104    	; 0xab6 <DIO_setpindir+0xfa>
     a4e:	2a b3       	in	r18, 0x1a	; 26
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_setpindir+0x9e>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	6a 95       	dec	r22
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_setpindir+0x9a>
     a5e:	82 2b       	or	r24, r18
     a60:	8a bb       	out	0x1a, r24	; 26
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
     a66:	27 b3       	in	r18, 0x17	; 23
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_setpindir+0xb6>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	6a 95       	dec	r22
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_setpindir+0xb2>
     a76:	82 2b       	or	r24, r18
     a78:	87 bb       	out	0x17, r24	; 23
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	08 95       	ret
     a7e:	24 b3       	in	r18, 0x14	; 20
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <DIO_setpindir+0xce>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	6a 95       	dec	r22
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <DIO_setpindir+0xca>
     a8e:	82 2b       	or	r24, r18
     a90:	84 bb       	out	0x14, r24	; 20
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	08 95       	ret
     a96:	21 b3       	in	r18, 0x11	; 17
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_setpindir+0xe6>
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	6a 95       	dec	r22
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_setpindir+0xe2>
     aa6:	82 2b       	or	r24, r18
     aa8:	81 bb       	out	0x11, r24	; 17
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	08 95       	ret
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	08 95       	ret
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	08 95       	ret

00000aba <DIO_setpinvalue>:
     aba:	44 23       	and	r20, r20
     abc:	19 f0       	breq	.+6      	; 0xac4 <DIO_setpinvalue+0xa>
     abe:	41 30       	cpi	r20, 0x01	; 1
     ac0:	e9 f1       	breq	.+122    	; 0xb3c <DIO_setpinvalue+0x82>
     ac2:	74 c0       	rjmp	.+232    	; 0xbac <DIO_setpinvalue+0xf2>
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	99 f0       	breq	.+38     	; 0xaee <DIO_setpinvalue+0x34>
     ac8:	28 f0       	brcs	.+10     	; 0xad4 <DIO_setpinvalue+0x1a>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	e9 f0       	breq	.+58     	; 0xb08 <DIO_setpinvalue+0x4e>
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	41 f1       	breq	.+80     	; 0xb22 <DIO_setpinvalue+0x68>
     ad2:	6e c0       	rjmp	.+220    	; 0xbb0 <DIO_setpinvalue+0xf6>
     ad4:	2b b3       	in	r18, 0x1b	; 27
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_setpinvalue+0x26>
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	6a 95       	dec	r22
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_setpinvalue+0x22>
     ae4:	80 95       	com	r24
     ae6:	82 23       	and	r24, r18
     ae8:	8b bb       	out	0x1b, r24	; 27
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret
     aee:	28 b3       	in	r18, 0x18	; 24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_setpinvalue+0x40>
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	6a 95       	dec	r22
     afc:	e2 f7       	brpl	.-8      	; 0xaf6 <DIO_setpinvalue+0x3c>
     afe:	80 95       	com	r24
     b00:	82 23       	and	r24, r18
     b02:	88 bb       	out	0x18, r24	; 24
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
     b08:	25 b3       	in	r18, 0x15	; 21
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_setpinvalue+0x5a>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	6a 95       	dec	r22
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_setpinvalue+0x56>
     b18:	80 95       	com	r24
     b1a:	82 23       	and	r24, r18
     b1c:	85 bb       	out	0x15, r24	; 21
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	08 95       	ret
     b22:	22 b3       	in	r18, 0x12	; 18
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_setpinvalue+0x74>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	6a 95       	dec	r22
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_setpinvalue+0x70>
     b32:	80 95       	com	r24
     b34:	82 23       	and	r24, r18
     b36:	82 bb       	out	0x12, r24	; 18
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 95       	ret
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	91 f0       	breq	.+36     	; 0xb64 <DIO_setpinvalue+0xaa>
     b40:	28 f0       	brcs	.+10     	; 0xb4c <DIO_setpinvalue+0x92>
     b42:	82 30       	cpi	r24, 0x02	; 2
     b44:	d9 f0       	breq	.+54     	; 0xb7c <DIO_setpinvalue+0xc2>
     b46:	83 30       	cpi	r24, 0x03	; 3
     b48:	29 f1       	breq	.+74     	; 0xb94 <DIO_setpinvalue+0xda>
     b4a:	34 c0       	rjmp	.+104    	; 0xbb4 <DIO_setpinvalue+0xfa>
     b4c:	2b b3       	in	r18, 0x1b	; 27
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <DIO_setpinvalue+0x9e>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	6a 95       	dec	r22
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <DIO_setpinvalue+0x9a>
     b5c:	82 2b       	or	r24, r18
     b5e:	8b bb       	out	0x1b, r24	; 27
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	08 95       	ret
     b64:	28 b3       	in	r18, 0x18	; 24
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <DIO_setpinvalue+0xb6>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	6a 95       	dec	r22
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <DIO_setpinvalue+0xb2>
     b74:	82 2b       	or	r24, r18
     b76:	88 bb       	out	0x18, r24	; 24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
     b7c:	25 b3       	in	r18, 0x15	; 21
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <DIO_setpinvalue+0xce>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	6a 95       	dec	r22
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <DIO_setpinvalue+0xca>
     b8c:	82 2b       	or	r24, r18
     b8e:	85 bb       	out	0x15, r24	; 21
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	08 95       	ret
     b94:	22 b3       	in	r18, 0x12	; 18
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_setpinvalue+0xe6>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	6a 95       	dec	r22
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_setpinvalue+0xe2>
     ba4:	82 2b       	or	r24, r18
     ba6:	82 bb       	out	0x12, r24	; 18
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	08 95       	ret
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	08 95       	ret
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	08 95       	ret

00000bb8 <DIO_readpin>:
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	99 f0       	breq	.+38     	; 0xbe2 <DIO_readpin+0x2a>
     bbc:	28 f0       	brcs	.+10     	; 0xbc8 <DIO_readpin+0x10>
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	e9 f0       	breq	.+58     	; 0xbfc <DIO_readpin+0x44>
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	41 f1       	breq	.+80     	; 0xc16 <DIO_readpin+0x5e>
     bc6:	34 c0       	rjmp	.+104    	; 0xc30 <DIO_readpin+0x78>
     bc8:	89 b3       	in	r24, 0x19	; 25
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_readpin+0x1a>
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	6a 95       	dec	r22
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_readpin+0x16>
     bd6:	81 70       	andi	r24, 0x01	; 1
     bd8:	89 bb       	out	0x19, r24	; 25
     bda:	fa 01       	movw	r30, r20
     bdc:	80 83       	st	Z, r24
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret
     be2:	86 b3       	in	r24, 0x16	; 22
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_readpin+0x34>
     be8:	95 95       	asr	r25
     bea:	87 95       	ror	r24
     bec:	6a 95       	dec	r22
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_readpin+0x30>
     bf0:	81 70       	andi	r24, 0x01	; 1
     bf2:	86 bb       	out	0x16, r24	; 22
     bf4:	fa 01       	movw	r30, r20
     bf6:	80 83       	st	Z, r24
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	08 95       	ret
     bfc:	83 b3       	in	r24, 0x13	; 19
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_readpin+0x4e>
     c02:	95 95       	asr	r25
     c04:	87 95       	ror	r24
     c06:	6a 95       	dec	r22
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_readpin+0x4a>
     c0a:	81 70       	andi	r24, 0x01	; 1
     c0c:	83 bb       	out	0x13, r24	; 19
     c0e:	fa 01       	movw	r30, r20
     c10:	80 83       	st	Z, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret
     c16:	80 b3       	in	r24, 0x10	; 16
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_readpin+0x68>
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	6a 95       	dec	r22
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_readpin+0x64>
     c24:	81 70       	andi	r24, 0x01	; 1
     c26:	80 bb       	out	0x10, r24	; 16
     c28:	fa 01       	movw	r30, r20
     c2a:	80 83       	st	Z, r24
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	08 95       	ret
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	08 95       	ret

00000c34 <DIO_array_write>:
/*@param u8_l_portNumber        port number                                                */
/*@param u8_l_value             mask desired state                                         */
/*******************************************************************************************/
void DIO_array_write(uint8_t u8_l_mask, uint8_t u8_l_portNumber, uint8_t u8_l_value)
{
	switch(u8_l_portNumber)
     c34:	61 30       	cpi	r22, 0x01	; 1
     c36:	99 f0       	breq	.+38     	; 0xc5e <DIO_array_write+0x2a>
     c38:	28 f0       	brcs	.+10     	; 0xc44 <DIO_array_write+0x10>
     c3a:	62 30       	cpi	r22, 0x02	; 2
     c3c:	e9 f0       	breq	.+58     	; 0xc78 <DIO_array_write+0x44>
     c3e:	63 30       	cpi	r22, 0x03	; 3
     c40:	41 f1       	breq	.+80     	; 0xc92 <DIO_array_write+0x5e>
     c42:	08 95       	ret
	{
		case DIO_PORTA:
		if(u8_l_value == DIO_PIN_LOW)
     c44:	41 11       	cpse	r20, r1
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <DIO_array_write+0x1e>
		{
			Clear_mask(u8_l_mask,PORTA);
     c48:	9b b3       	in	r25, 0x1b	; 27
     c4a:	80 95       	com	r24
     c4c:	89 23       	and	r24, r25
     c4e:	8b bb       	out	0x1b, r24	; 27
     c50:	08 95       	ret
		}
		else if(u8_l_value == DIO_PIN_HIGH)
     c52:	41 30       	cpi	r20, 0x01	; 1
     c54:	51 f5       	brne	.+84     	; 0xcaa <DIO_array_write+0x76>
		{
			Set_mask(u8_l_mask,PORTA);
     c56:	9b b3       	in	r25, 0x1b	; 27
     c58:	89 2b       	or	r24, r25
     c5a:	8b bb       	out	0x1b, r24	; 27
     c5c:	08 95       	ret
			return ;
		}
		break;
		
		case DIO_PORTB:
		if(u8_l_value == DIO_PIN_LOW)
     c5e:	41 11       	cpse	r20, r1
     c60:	05 c0       	rjmp	.+10     	; 0xc6c <DIO_array_write+0x38>
		{
			Clear_mask(u8_l_mask,PORTB);
     c62:	98 b3       	in	r25, 0x18	; 24
     c64:	80 95       	com	r24
     c66:	89 23       	and	r24, r25
     c68:	88 bb       	out	0x18, r24	; 24
     c6a:	08 95       	ret
		}
		else if(u8_l_value == DIO_PIN_HIGH)
     c6c:	41 30       	cpi	r20, 0x01	; 1
     c6e:	e9 f4       	brne	.+58     	; 0xcaa <DIO_array_write+0x76>
		{
			Set_mask(u8_l_mask,PORTB);
     c70:	98 b3       	in	r25, 0x18	; 24
     c72:	89 2b       	or	r24, r25
     c74:	88 bb       	out	0x18, r24	; 24
     c76:	08 95       	ret
			return ;
		}
		break;
		
		case DIO_PORTC:
		if(u8_l_value == DIO_PIN_LOW)
     c78:	41 11       	cpse	r20, r1
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <DIO_array_write+0x52>
		{
			Clear_mask(u8_l_mask,PORTC);
     c7c:	95 b3       	in	r25, 0x15	; 21
     c7e:	80 95       	com	r24
     c80:	89 23       	and	r24, r25
     c82:	85 bb       	out	0x15, r24	; 21
     c84:	08 95       	ret
		}
		else if(u8_l_value == DIO_PIN_HIGH)
     c86:	41 30       	cpi	r20, 0x01	; 1
     c88:	81 f4       	brne	.+32     	; 0xcaa <DIO_array_write+0x76>
		{
			Set_mask(u8_l_mask,PORTC);
     c8a:	95 b3       	in	r25, 0x15	; 21
     c8c:	89 2b       	or	r24, r25
     c8e:	85 bb       	out	0x15, r24	; 21
     c90:	08 95       	ret
			return ;
		}
		break;
		
		case DIO_PORTD:
		if(u8_l_value == DIO_PIN_LOW)
     c92:	41 11       	cpse	r20, r1
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <DIO_array_write+0x6c>
		{
			Clear_mask(u8_l_mask,PORTD);
     c96:	92 b3       	in	r25, 0x12	; 18
     c98:	80 95       	com	r24
     c9a:	89 23       	and	r24, r25
     c9c:	82 bb       	out	0x12, r24	; 18
     c9e:	08 95       	ret
		}
		else if(u8_l_value == DIO_PIN_HIGH)
     ca0:	41 30       	cpi	r20, 0x01	; 1
     ca2:	19 f4       	brne	.+6      	; 0xcaa <DIO_array_write+0x76>
		{
			Set_mask(u8_l_mask,PORTD);
     ca4:	92 b3       	in	r25, 0x12	; 18
     ca6:	89 2b       	or	r24, r25
     ca8:	82 bb       	out	0x12, r24	; 18
     caa:	08 95       	ret

00000cac <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
     cb2:	83 b7       	in	r24, 0x33	; 51
     cb4:	8f 7b       	andi	r24, 0xBF	; 191
     cb6:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
     cb8:	83 b7       	in	r24, 0x33	; 51
     cba:	87 7f       	andi	r24, 0xF7	; 247
     cbc:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
     cbe:	83 b7       	in	r24, 0x33	; 51
     cc0:	8f 7e       	andi	r24, 0xEF	; 239
     cc2:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
     cc4:	83 b7       	in	r24, 0x33	; 51
     cc6:	8f 7d       	andi	r24, 0xDF	; 223
     cc8:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == PRESCALER_64
	
	set_bit(TCCR0 , 0);
     cce:	83 b7       	in	r24, 0x33	; 51
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 1);
     cd4:	83 b7       	in	r24, 0x33	; 51
     cd6:	82 60       	ori	r24, 0x02	; 2
     cd8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     cda:	83 b7       	in	r24, 0x33	; 51
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	08 95       	ret

00000ce4 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
     ce4:	83 b7       	in	r24, 0x33	; 51
     ce6:	8e 7f       	andi	r24, 0xFE	; 254
     ce8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     cea:	83 b7       	in	r24, 0x33	; 51
     cec:	8d 7f       	andi	r24, 0xFD	; 253
     cee:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     cf0:	83 b7       	in	r24, 0x33	; 51
     cf2:	8b 7f       	andi	r24, 0xFB	; 251
     cf4:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == PRESCALER_64
		
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 2.048);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
     cfa:	0e 94 2a 08 	call	0x1054	; 0x1054 <__floatunsisf>
     cfe:	2f e6       	ldi	r18, 0x6F	; 111
     d00:	32 e1       	ldi	r19, 0x12	; 18
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	50 e4       	ldi	r21, 0x40	; 64
     d06:	0e 94 82 07 	call	0xf04	; 0xf04 <__divsf3>
     d0a:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fixunssfsi>
     d0e:	60 93 b5 00 	sts	0x00B5, r22	; 0x8000b5 <u32_gs_tmr0nuofovs>
     d12:	70 93 b6 00 	sts	0x00B6, r23	; 0x8000b6 <u32_gs_tmr0nuofovs+0x1>
     d16:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <u32_gs_tmr0nuofovs+0x2>
     d1a:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     d1e:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     d20:	0e 94 67 06 	call	0xcce	; 0xcce <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     d2a:	0a c0       	rjmp	.+20     	; 0xd40 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     d2c:	08 b6       	in	r0, 0x38	; 56
     d2e:	00 fe       	sbrs	r0, 0
     d30:	fd cf       	rjmp	.-6      	; 0xd2c <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     d32:	88 b7       	in	r24, 0x38	; 56
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     d38:	4f 5f       	subi	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	6f 4f       	sbci	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     d40:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs>
     d44:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x1>
     d48:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <u32_gs_tmr0nuofovs+0x2>
     d4c:	b0 91 b8 00 	lds	r27, 0x00B8	; 0x8000b8 <u32_gs_tmr0nuofovs+0x3>
     d50:	48 17       	cp	r20, r24
     d52:	59 07       	cpc	r21, r25
     d54:	6a 07       	cpc	r22, r26
     d56:	7b 07       	cpc	r23, r27
     d58:	48 f3       	brcs	.-46     	; 0xd2c <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
     d5a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <u32_gs_tmr0nuofovs>
     d5e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <u32_gs_tmr0nuofovs+0x1>
     d62:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <u32_gs_tmr0nuofovs+0x2>
     d66:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     d6a:	0e 94 72 06 	call	0xce4	; 0xce4 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret

00000d72 <TMR0_delaymicos>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == PRESCALER_64
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 2048);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	07 2e       	mov	r0, r23
     d78:	7b e0       	ldi	r23, 0x0B	; 11
     d7a:	b6 95       	lsr	r27
     d7c:	a7 95       	ror	r26
     d7e:	97 95       	ror	r25
     d80:	87 95       	ror	r24
     d82:	7a 95       	dec	r23
     d84:	d1 f7       	brne	.-12     	; 0xd7a <TMR0_delaymicos+0x8>
     d86:	70 2d       	mov	r23, r0
     d88:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <u32_gs_tmr0nuofovs>
     d8c:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <u32_gs_tmr0nuofovs+0x1>
     d90:	a0 93 b7 00 	sts	0x00B7, r26	; 0x8000b7 <u32_gs_tmr0nuofovs+0x2>
     d94:	b0 93 b8 00 	sts	0x00B8, r27	; 0x8000b8 <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     d98:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     d9a:	0e 94 67 06 	call	0xcce	; 0xcce <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicos(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     da4:	0a c0       	rjmp	.+20     	; 0xdba <TMR0_delaymicos+0x48>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     da6:	08 b6       	in	r0, 0x38	; 56
     da8:	00 fe       	sbrs	r0, 0
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <TMR0_delaymicos+0x34>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     dac:	88 b7       	in	r24, 0x38	; 56
     dae:	81 60       	ori	r24, 0x01	; 1
     db0:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     db2:	4f 5f       	subi	r20, 0xFF	; 255
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	6f 4f       	sbci	r22, 0xFF	; 255
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     dba:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs>
     dbe:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x1>
     dc2:	a0 91 b7 00 	lds	r26, 0x00B7	; 0x8000b7 <u32_gs_tmr0nuofovs+0x2>
     dc6:	b0 91 b8 00 	lds	r27, 0x00B8	; 0x8000b8 <u32_gs_tmr0nuofovs+0x3>
     dca:	48 17       	cp	r20, r24
     dcc:	59 07       	cpc	r21, r25
     dce:	6a 07       	cpc	r22, r26
     dd0:	7b 07       	cpc	r23, r27
     dd2:	48 f3       	brcs	.-46     	; 0xda6 <TMR0_delaymicos+0x34>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     dd4:	0e 94 72 06 	call	0xce4	; 0xce4 <TMR0_stop>
	
	return en_a_delaystatus ; 
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret

00000ddc <TMR1_init>:
	
	
	#endif
	
	return u32_a_ovs ;
}
     ddc:	8f b5       	in	r24, 0x2f	; 47
     dde:	8e 7f       	andi	r24, 0xFE	; 254
     de0:	8f bd       	out	0x2f, r24	; 47
     de2:	8f b5       	in	r24, 0x2f	; 47
     de4:	8d 7f       	andi	r24, 0xFD	; 253
     de6:	8f bd       	out	0x2f, r24	; 47
     de8:	8e b5       	in	r24, 0x2e	; 46
     dea:	87 7f       	andi	r24, 0xF7	; 247
     dec:	8e bd       	out	0x2e, r24	; 46
     dee:	8e b5       	in	r24, 0x2e	; 46
     df0:	8f 7e       	andi	r24, 0xEF	; 239
     df2:	8e bd       	out	0x2e, r24	; 46
     df4:	8f b5       	in	r24, 0x2f	; 47
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	8f bd       	out	0x2f, r24	; 47
     dfa:	8f b5       	in	r24, 0x2f	; 47
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	8f bd       	out	0x2f, r24	; 47
     e00:	08 95       	ret

00000e02 <TMR1_start>:
     e02:	8e b5       	in	r24, 0x2e	; 46
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	8e bd       	out	0x2e, r24	; 46
     e08:	8e b5       	in	r24, 0x2e	; 46
     e0a:	82 60       	ori	r24, 0x02	; 2
     e0c:	8e bd       	out	0x2e, r24	; 46
     e0e:	8e b5       	in	r24, 0x2e	; 46
     e10:	8b 7f       	andi	r24, 0xFB	; 251
     e12:	8e bd       	out	0x2e, r24	; 46
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret

00000e18 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
     e18:	2c b5       	in	r18, 0x2c	; 44
     e1a:	3d b5       	in	r19, 0x2d	; 45
     e1c:	fc 01       	movw	r30, r24
     e1e:	31 83       	std	Z+1, r19	; 0x01
     e20:	20 83       	st	Z, r18
     e22:	08 95       	ret

00000e24 <TMR1_setvalue>:
}

void TMR1_setvalue(uint16t u16_a_value)
{
	TCNT1 = u16_a_value;
     e24:	9d bd       	out	0x2d, r25	; 45
     e26:	8c bd       	out	0x2c, r24	; 44
     e28:	08 95       	ret

00000e2a <__subsf3>:
     e2a:	50 58       	subi	r21, 0x80	; 128

00000e2c <__addsf3>:
     e2c:	bb 27       	eor	r27, r27
     e2e:	aa 27       	eor	r26, r26
     e30:	0e 94 2d 07 	call	0xe5a	; 0xe5a <__addsf3x>
     e34:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_round>
     e38:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscA>
     e3c:	38 f0       	brcs	.+14     	; 0xe4c <__addsf3+0x20>
     e3e:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_pscB>
     e42:	20 f0       	brcs	.+8      	; 0xe4c <__addsf3+0x20>
     e44:	39 f4       	brne	.+14     	; 0xe54 <__addsf3+0x28>
     e46:	9f 3f       	cpi	r25, 0xFF	; 255
     e48:	19 f4       	brne	.+6      	; 0xe50 <__addsf3+0x24>
     e4a:	26 f4       	brtc	.+8      	; 0xe54 <__addsf3+0x28>
     e4c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>
     e50:	0e f4       	brtc	.+2      	; 0xe54 <__addsf3+0x28>
     e52:	e0 95       	com	r30
     e54:	e7 fb       	bst	r30, 7
     e56:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>

00000e5a <__addsf3x>:
     e5a:	e9 2f       	mov	r30, r25
     e5c:	0e 94 8f 08 	call	0x111e	; 0x111e <__fp_split3>
     e60:	58 f3       	brcs	.-42     	; 0xe38 <__addsf3+0xc>
     e62:	ba 17       	cp	r27, r26
     e64:	62 07       	cpc	r22, r18
     e66:	73 07       	cpc	r23, r19
     e68:	84 07       	cpc	r24, r20
     e6a:	95 07       	cpc	r25, r21
     e6c:	20 f0       	brcs	.+8      	; 0xe76 <__addsf3x+0x1c>
     e6e:	79 f4       	brne	.+30     	; 0xe8e <__addsf3x+0x34>
     e70:	a6 f5       	brtc	.+104    	; 0xeda <__addsf3x+0x80>
     e72:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_zero>
     e76:	0e f4       	brtc	.+2      	; 0xe7a <__addsf3x+0x20>
     e78:	e0 95       	com	r30
     e7a:	0b 2e       	mov	r0, r27
     e7c:	ba 2f       	mov	r27, r26
     e7e:	a0 2d       	mov	r26, r0
     e80:	0b 01       	movw	r0, r22
     e82:	b9 01       	movw	r22, r18
     e84:	90 01       	movw	r18, r0
     e86:	0c 01       	movw	r0, r24
     e88:	ca 01       	movw	r24, r20
     e8a:	a0 01       	movw	r20, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	ff 27       	eor	r31, r31
     e90:	59 1b       	sub	r21, r25
     e92:	99 f0       	breq	.+38     	; 0xeba <__addsf3x+0x60>
     e94:	59 3f       	cpi	r21, 0xF9	; 249
     e96:	50 f4       	brcc	.+20     	; 0xeac <__addsf3x+0x52>
     e98:	50 3e       	cpi	r21, 0xE0	; 224
     e9a:	68 f1       	brcs	.+90     	; 0xef6 <__addsf3x+0x9c>
     e9c:	1a 16       	cp	r1, r26
     e9e:	f0 40       	sbci	r31, 0x00	; 0
     ea0:	a2 2f       	mov	r26, r18
     ea2:	23 2f       	mov	r18, r19
     ea4:	34 2f       	mov	r19, r20
     ea6:	44 27       	eor	r20, r20
     ea8:	58 5f       	subi	r21, 0xF8	; 248
     eaa:	f3 cf       	rjmp	.-26     	; 0xe92 <__addsf3x+0x38>
     eac:	46 95       	lsr	r20
     eae:	37 95       	ror	r19
     eb0:	27 95       	ror	r18
     eb2:	a7 95       	ror	r26
     eb4:	f0 40       	sbci	r31, 0x00	; 0
     eb6:	53 95       	inc	r21
     eb8:	c9 f7       	brne	.-14     	; 0xeac <__addsf3x+0x52>
     eba:	7e f4       	brtc	.+30     	; 0xeda <__addsf3x+0x80>
     ebc:	1f 16       	cp	r1, r31
     ebe:	ba 0b       	sbc	r27, r26
     ec0:	62 0b       	sbc	r22, r18
     ec2:	73 0b       	sbc	r23, r19
     ec4:	84 0b       	sbc	r24, r20
     ec6:	ba f0       	brmi	.+46     	; 0xef6 <__addsf3x+0x9c>
     ec8:	91 50       	subi	r25, 0x01	; 1
     eca:	a1 f0       	breq	.+40     	; 0xef4 <__addsf3x+0x9a>
     ecc:	ff 0f       	add	r31, r31
     ece:	bb 1f       	adc	r27, r27
     ed0:	66 1f       	adc	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	c2 f7       	brpl	.-16     	; 0xec8 <__addsf3x+0x6e>
     ed8:	0e c0       	rjmp	.+28     	; 0xef6 <__addsf3x+0x9c>
     eda:	ba 0f       	add	r27, r26
     edc:	62 1f       	adc	r22, r18
     ede:	73 1f       	adc	r23, r19
     ee0:	84 1f       	adc	r24, r20
     ee2:	48 f4       	brcc	.+18     	; 0xef6 <__addsf3x+0x9c>
     ee4:	87 95       	ror	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b7 95       	ror	r27
     eec:	f7 95       	ror	r31
     eee:	9e 3f       	cpi	r25, 0xFE	; 254
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <__addsf3x+0x9a>
     ef2:	b0 cf       	rjmp	.-160    	; 0xe54 <__addsf3+0x28>
     ef4:	93 95       	inc	r25
     ef6:	88 0f       	add	r24, r24
     ef8:	08 f0       	brcs	.+2      	; 0xefc <__addsf3x+0xa2>
     efa:	99 27       	eor	r25, r25
     efc:	ee 0f       	add	r30, r30
     efe:	97 95       	ror	r25
     f00:	87 95       	ror	r24
     f02:	08 95       	ret

00000f04 <__divsf3>:
     f04:	0e 94 96 07 	call	0xf2c	; 0xf2c <__divsf3x>
     f08:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_round>
     f0c:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_pscB>
     f10:	58 f0       	brcs	.+22     	; 0xf28 <__divsf3+0x24>
     f12:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscA>
     f16:	40 f0       	brcs	.+16     	; 0xf28 <__divsf3+0x24>
     f18:	29 f4       	brne	.+10     	; 0xf24 <__divsf3+0x20>
     f1a:	5f 3f       	cpi	r21, 0xFF	; 255
     f1c:	29 f0       	breq	.+10     	; 0xf28 <__divsf3+0x24>
     f1e:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
     f22:	51 11       	cpse	r21, r1
     f24:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_szero>
     f28:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>

00000f2c <__divsf3x>:
     f2c:	0e 94 8f 08 	call	0x111e	; 0x111e <__fp_split3>
     f30:	68 f3       	brcs	.-38     	; 0xf0c <__divsf3+0x8>

00000f32 <__divsf3_pse>:
     f32:	99 23       	and	r25, r25
     f34:	b1 f3       	breq	.-20     	; 0xf22 <__divsf3+0x1e>
     f36:	55 23       	and	r21, r21
     f38:	91 f3       	breq	.-28     	; 0xf1e <__divsf3+0x1a>
     f3a:	95 1b       	sub	r25, r21
     f3c:	55 0b       	sbc	r21, r21
     f3e:	bb 27       	eor	r27, r27
     f40:	aa 27       	eor	r26, r26
     f42:	62 17       	cp	r22, r18
     f44:	73 07       	cpc	r23, r19
     f46:	84 07       	cpc	r24, r20
     f48:	38 f0       	brcs	.+14     	; 0xf58 <__divsf3_pse+0x26>
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	44 1f       	adc	r20, r20
     f54:	aa 1f       	adc	r26, r26
     f56:	a9 f3       	breq	.-22     	; 0xf42 <__divsf3_pse+0x10>
     f58:	35 d0       	rcall	.+106    	; 0xfc4 <__divsf3_pse+0x92>
     f5a:	0e 2e       	mov	r0, r30
     f5c:	3a f0       	brmi	.+14     	; 0xf6c <__divsf3_pse+0x3a>
     f5e:	e0 e8       	ldi	r30, 0x80	; 128
     f60:	32 d0       	rcall	.+100    	; 0xfc6 <__divsf3_pse+0x94>
     f62:	91 50       	subi	r25, 0x01	; 1
     f64:	50 40       	sbci	r21, 0x00	; 0
     f66:	e6 95       	lsr	r30
     f68:	00 1c       	adc	r0, r0
     f6a:	ca f7       	brpl	.-14     	; 0xf5e <__divsf3_pse+0x2c>
     f6c:	2b d0       	rcall	.+86     	; 0xfc4 <__divsf3_pse+0x92>
     f6e:	fe 2f       	mov	r31, r30
     f70:	29 d0       	rcall	.+82     	; 0xfc4 <__divsf3_pse+0x92>
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	bb 1f       	adc	r27, r27
     f7a:	26 17       	cp	r18, r22
     f7c:	37 07       	cpc	r19, r23
     f7e:	48 07       	cpc	r20, r24
     f80:	ab 07       	cpc	r26, r27
     f82:	b0 e8       	ldi	r27, 0x80	; 128
     f84:	09 f0       	breq	.+2      	; 0xf88 <__divsf3_pse+0x56>
     f86:	bb 0b       	sbc	r27, r27
     f88:	80 2d       	mov	r24, r0
     f8a:	bf 01       	movw	r22, r30
     f8c:	ff 27       	eor	r31, r31
     f8e:	93 58       	subi	r25, 0x83	; 131
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	3a f0       	brmi	.+14     	; 0xfa2 <__divsf3_pse+0x70>
     f94:	9e 3f       	cpi	r25, 0xFE	; 254
     f96:	51 05       	cpc	r21, r1
     f98:	78 f0       	brcs	.+30     	; 0xfb8 <__divsf3_pse+0x86>
     f9a:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
     f9e:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_szero>
     fa2:	5f 3f       	cpi	r21, 0xFF	; 255
     fa4:	e4 f3       	brlt	.-8      	; 0xf9e <__divsf3_pse+0x6c>
     fa6:	98 3e       	cpi	r25, 0xE8	; 232
     fa8:	d4 f3       	brlt	.-12     	; 0xf9e <__divsf3_pse+0x6c>
     faa:	86 95       	lsr	r24
     fac:	77 95       	ror	r23
     fae:	67 95       	ror	r22
     fb0:	b7 95       	ror	r27
     fb2:	f7 95       	ror	r31
     fb4:	9f 5f       	subi	r25, 0xFF	; 255
     fb6:	c9 f7       	brne	.-14     	; 0xfaa <__divsf3_pse+0x78>
     fb8:	88 0f       	add	r24, r24
     fba:	91 1d       	adc	r25, r1
     fbc:	96 95       	lsr	r25
     fbe:	87 95       	ror	r24
     fc0:	97 f9       	bld	r25, 7
     fc2:	08 95       	ret
     fc4:	e1 e0       	ldi	r30, 0x01	; 1
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	bb 1f       	adc	r27, r27
     fce:	62 17       	cp	r22, r18
     fd0:	73 07       	cpc	r23, r19
     fd2:	84 07       	cpc	r24, r20
     fd4:	ba 07       	cpc	r27, r26
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <__divsf3_pse+0xae>
     fd8:	62 1b       	sub	r22, r18
     fda:	73 0b       	sbc	r23, r19
     fdc:	84 0b       	sbc	r24, r20
     fde:	ba 0b       	sbc	r27, r26
     fe0:	ee 1f       	adc	r30, r30
     fe2:	88 f7       	brcc	.-30     	; 0xfc6 <__divsf3_pse+0x94>
     fe4:	e0 95       	com	r30
     fe6:	08 95       	ret

00000fe8 <__fixsfsi>:
     fe8:	0e 94 fb 07 	call	0xff6	; 0xff6 <__fixunssfsi>
     fec:	68 94       	set
     fee:	b1 11       	cpse	r27, r1
     ff0:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_szero>
     ff4:	08 95       	ret

00000ff6 <__fixunssfsi>:
     ff6:	0e 94 97 08 	call	0x112e	; 0x112e <__fp_splitA>
     ffa:	88 f0       	brcs	.+34     	; 0x101e <__fixunssfsi+0x28>
     ffc:	9f 57       	subi	r25, 0x7F	; 127
     ffe:	98 f0       	brcs	.+38     	; 0x1026 <__fixunssfsi+0x30>
    1000:	b9 2f       	mov	r27, r25
    1002:	99 27       	eor	r25, r25
    1004:	b7 51       	subi	r27, 0x17	; 23
    1006:	b0 f0       	brcs	.+44     	; 0x1034 <__fixunssfsi+0x3e>
    1008:	e1 f0       	breq	.+56     	; 0x1042 <__fixunssfsi+0x4c>
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	1a f0       	brmi	.+6      	; 0x101a <__fixunssfsi+0x24>
    1014:	ba 95       	dec	r27
    1016:	c9 f7       	brne	.-14     	; 0x100a <__fixunssfsi+0x14>
    1018:	14 c0       	rjmp	.+40     	; 0x1042 <__fixunssfsi+0x4c>
    101a:	b1 30       	cpi	r27, 0x01	; 1
    101c:	91 f0       	breq	.+36     	; 0x1042 <__fixunssfsi+0x4c>
    101e:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_zero>
    1022:	b1 e0       	ldi	r27, 0x01	; 1
    1024:	08 95       	ret
    1026:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__fp_zero>
    102a:	67 2f       	mov	r22, r23
    102c:	78 2f       	mov	r23, r24
    102e:	88 27       	eor	r24, r24
    1030:	b8 5f       	subi	r27, 0xF8	; 248
    1032:	39 f0       	breq	.+14     	; 0x1042 <__fixunssfsi+0x4c>
    1034:	b9 3f       	cpi	r27, 0xF9	; 249
    1036:	cc f3       	brlt	.-14     	; 0x102a <__fixunssfsi+0x34>
    1038:	86 95       	lsr	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b3 95       	inc	r27
    1040:	d9 f7       	brne	.-10     	; 0x1038 <__fixunssfsi+0x42>
    1042:	3e f4       	brtc	.+14     	; 0x1052 <__fixunssfsi+0x5c>
    1044:	90 95       	com	r25
    1046:	80 95       	com	r24
    1048:	70 95       	com	r23
    104a:	61 95       	neg	r22
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <__floatunsisf>:
    1054:	e8 94       	clt
    1056:	09 c0       	rjmp	.+18     	; 0x106a <__floatsisf+0x12>

00001058 <__floatsisf>:
    1058:	97 fb       	bst	r25, 7
    105a:	3e f4       	brtc	.+14     	; 0x106a <__floatsisf+0x12>
    105c:	90 95       	com	r25
    105e:	80 95       	com	r24
    1060:	70 95       	com	r23
    1062:	61 95       	neg	r22
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	8f 4f       	sbci	r24, 0xFF	; 255
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	99 23       	and	r25, r25
    106c:	a9 f0       	breq	.+42     	; 0x1098 <__floatsisf+0x40>
    106e:	f9 2f       	mov	r31, r25
    1070:	96 e9       	ldi	r25, 0x96	; 150
    1072:	bb 27       	eor	r27, r27
    1074:	93 95       	inc	r25
    1076:	f6 95       	lsr	r31
    1078:	87 95       	ror	r24
    107a:	77 95       	ror	r23
    107c:	67 95       	ror	r22
    107e:	b7 95       	ror	r27
    1080:	f1 11       	cpse	r31, r1
    1082:	f8 cf       	rjmp	.-16     	; 0x1074 <__floatsisf+0x1c>
    1084:	fa f4       	brpl	.+62     	; 0x10c4 <__floatsisf+0x6c>
    1086:	bb 0f       	add	r27, r27
    1088:	11 f4       	brne	.+4      	; 0x108e <__floatsisf+0x36>
    108a:	60 ff       	sbrs	r22, 0
    108c:	1b c0       	rjmp	.+54     	; 0x10c4 <__floatsisf+0x6c>
    108e:	6f 5f       	subi	r22, 0xFF	; 255
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	8f 4f       	sbci	r24, 0xFF	; 255
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	16 c0       	rjmp	.+44     	; 0x10c4 <__floatsisf+0x6c>
    1098:	88 23       	and	r24, r24
    109a:	11 f0       	breq	.+4      	; 0x10a0 <__floatsisf+0x48>
    109c:	96 e9       	ldi	r25, 0x96	; 150
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <__floatsisf+0x6a>
    10a0:	77 23       	and	r23, r23
    10a2:	21 f0       	breq	.+8      	; 0x10ac <__floatsisf+0x54>
    10a4:	9e e8       	ldi	r25, 0x8E	; 142
    10a6:	87 2f       	mov	r24, r23
    10a8:	76 2f       	mov	r23, r22
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <__floatsisf+0x5e>
    10ac:	66 23       	and	r22, r22
    10ae:	71 f0       	breq	.+28     	; 0x10cc <__floatsisf+0x74>
    10b0:	96 e8       	ldi	r25, 0x86	; 134
    10b2:	86 2f       	mov	r24, r22
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	2a f0       	brmi	.+10     	; 0x10c4 <__floatsisf+0x6c>
    10ba:	9a 95       	dec	r25
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	da f7       	brpl	.-10     	; 0x10ba <__floatsisf+0x62>
    10c4:	88 0f       	add	r24, r24
    10c6:	96 95       	lsr	r25
    10c8:	87 95       	ror	r24
    10ca:	97 f9       	bld	r25, 7
    10cc:	08 95       	ret

000010ce <__fp_inf>:
    10ce:	97 f9       	bld	r25, 7
    10d0:	9f 67       	ori	r25, 0x7F	; 127
    10d2:	80 e8       	ldi	r24, 0x80	; 128
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	08 95       	ret

000010da <__fp_nan>:
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	80 ec       	ldi	r24, 0xC0	; 192
    10de:	08 95       	ret

000010e0 <__fp_pscA>:
    10e0:	00 24       	eor	r0, r0
    10e2:	0a 94       	dec	r0
    10e4:	16 16       	cp	r1, r22
    10e6:	17 06       	cpc	r1, r23
    10e8:	18 06       	cpc	r1, r24
    10ea:	09 06       	cpc	r0, r25
    10ec:	08 95       	ret

000010ee <__fp_pscB>:
    10ee:	00 24       	eor	r0, r0
    10f0:	0a 94       	dec	r0
    10f2:	12 16       	cp	r1, r18
    10f4:	13 06       	cpc	r1, r19
    10f6:	14 06       	cpc	r1, r20
    10f8:	05 06       	cpc	r0, r21
    10fa:	08 95       	ret

000010fc <__fp_round>:
    10fc:	09 2e       	mov	r0, r25
    10fe:	03 94       	inc	r0
    1100:	00 0c       	add	r0, r0
    1102:	11 f4       	brne	.+4      	; 0x1108 <__fp_round+0xc>
    1104:	88 23       	and	r24, r24
    1106:	52 f0       	brmi	.+20     	; 0x111c <__fp_round+0x20>
    1108:	bb 0f       	add	r27, r27
    110a:	40 f4       	brcc	.+16     	; 0x111c <__fp_round+0x20>
    110c:	bf 2b       	or	r27, r31
    110e:	11 f4       	brne	.+4      	; 0x1114 <__fp_round+0x18>
    1110:	60 ff       	sbrs	r22, 0
    1112:	04 c0       	rjmp	.+8      	; 0x111c <__fp_round+0x20>
    1114:	6f 5f       	subi	r22, 0xFF	; 255
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	8f 4f       	sbci	r24, 0xFF	; 255
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__fp_split3>:
    111e:	57 fd       	sbrc	r21, 7
    1120:	90 58       	subi	r25, 0x80	; 128
    1122:	44 0f       	add	r20, r20
    1124:	55 1f       	adc	r21, r21
    1126:	59 f0       	breq	.+22     	; 0x113e <__fp_splitA+0x10>
    1128:	5f 3f       	cpi	r21, 0xFF	; 255
    112a:	71 f0       	breq	.+28     	; 0x1148 <__fp_splitA+0x1a>
    112c:	47 95       	ror	r20

0000112e <__fp_splitA>:
    112e:	88 0f       	add	r24, r24
    1130:	97 fb       	bst	r25, 7
    1132:	99 1f       	adc	r25, r25
    1134:	61 f0       	breq	.+24     	; 0x114e <__fp_splitA+0x20>
    1136:	9f 3f       	cpi	r25, 0xFF	; 255
    1138:	79 f0       	breq	.+30     	; 0x1158 <__fp_splitA+0x2a>
    113a:	87 95       	ror	r24
    113c:	08 95       	ret
    113e:	12 16       	cp	r1, r18
    1140:	13 06       	cpc	r1, r19
    1142:	14 06       	cpc	r1, r20
    1144:	55 1f       	adc	r21, r21
    1146:	f2 cf       	rjmp	.-28     	; 0x112c <__fp_split3+0xe>
    1148:	46 95       	lsr	r20
    114a:	f1 df       	rcall	.-30     	; 0x112e <__fp_splitA>
    114c:	08 c0       	rjmp	.+16     	; 0x115e <__fp_splitA+0x30>
    114e:	16 16       	cp	r1, r22
    1150:	17 06       	cpc	r1, r23
    1152:	18 06       	cpc	r1, r24
    1154:	99 1f       	adc	r25, r25
    1156:	f1 cf       	rjmp	.-30     	; 0x113a <__fp_splitA+0xc>
    1158:	86 95       	lsr	r24
    115a:	71 05       	cpc	r23, r1
    115c:	61 05       	cpc	r22, r1
    115e:	08 94       	sec
    1160:	08 95       	ret

00001162 <__fp_zero>:
    1162:	e8 94       	clt

00001164 <__fp_szero>:
    1164:	bb 27       	eor	r27, r27
    1166:	66 27       	eor	r22, r22
    1168:	77 27       	eor	r23, r23
    116a:	cb 01       	movw	r24, r22
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret

00001170 <__gesf2>:
    1170:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fp_cmp>
    1174:	08 f4       	brcc	.+2      	; 0x1178 <__gesf2+0x8>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	08 95       	ret

0000117a <__mulsf3>:
    117a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__mulsf3x>
    117e:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_round>
    1182:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__fp_pscA>
    1186:	38 f0       	brcs	.+14     	; 0x1196 <__mulsf3+0x1c>
    1188:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_pscB>
    118c:	20 f0       	brcs	.+8      	; 0x1196 <__mulsf3+0x1c>
    118e:	95 23       	and	r25, r21
    1190:	11 f0       	breq	.+4      	; 0x1196 <__mulsf3+0x1c>
    1192:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
    1196:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__fp_nan>
    119a:	11 24       	eor	r1, r1
    119c:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_szero>

000011a0 <__mulsf3x>:
    11a0:	0e 94 8f 08 	call	0x111e	; 0x111e <__fp_split3>
    11a4:	70 f3       	brcs	.-36     	; 0x1182 <__mulsf3+0x8>

000011a6 <__mulsf3_pse>:
    11a6:	95 9f       	mul	r25, r21
    11a8:	c1 f3       	breq	.-16     	; 0x119a <__mulsf3+0x20>
    11aa:	95 0f       	add	r25, r21
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	55 1f       	adc	r21, r21
    11b0:	62 9f       	mul	r22, r18
    11b2:	f0 01       	movw	r30, r0
    11b4:	72 9f       	mul	r23, r18
    11b6:	bb 27       	eor	r27, r27
    11b8:	f0 0d       	add	r31, r0
    11ba:	b1 1d       	adc	r27, r1
    11bc:	63 9f       	mul	r22, r19
    11be:	aa 27       	eor	r26, r26
    11c0:	f0 0d       	add	r31, r0
    11c2:	b1 1d       	adc	r27, r1
    11c4:	aa 1f       	adc	r26, r26
    11c6:	64 9f       	mul	r22, r20
    11c8:	66 27       	eor	r22, r22
    11ca:	b0 0d       	add	r27, r0
    11cc:	a1 1d       	adc	r26, r1
    11ce:	66 1f       	adc	r22, r22
    11d0:	82 9f       	mul	r24, r18
    11d2:	22 27       	eor	r18, r18
    11d4:	b0 0d       	add	r27, r0
    11d6:	a1 1d       	adc	r26, r1
    11d8:	62 1f       	adc	r22, r18
    11da:	73 9f       	mul	r23, r19
    11dc:	b0 0d       	add	r27, r0
    11de:	a1 1d       	adc	r26, r1
    11e0:	62 1f       	adc	r22, r18
    11e2:	83 9f       	mul	r24, r19
    11e4:	a0 0d       	add	r26, r0
    11e6:	61 1d       	adc	r22, r1
    11e8:	22 1f       	adc	r18, r18
    11ea:	74 9f       	mul	r23, r20
    11ec:	33 27       	eor	r19, r19
    11ee:	a0 0d       	add	r26, r0
    11f0:	61 1d       	adc	r22, r1
    11f2:	23 1f       	adc	r18, r19
    11f4:	84 9f       	mul	r24, r20
    11f6:	60 0d       	add	r22, r0
    11f8:	21 1d       	adc	r18, r1
    11fa:	82 2f       	mov	r24, r18
    11fc:	76 2f       	mov	r23, r22
    11fe:	6a 2f       	mov	r22, r26
    1200:	11 24       	eor	r1, r1
    1202:	9f 57       	subi	r25, 0x7F	; 127
    1204:	50 40       	sbci	r21, 0x00	; 0
    1206:	9a f0       	brmi	.+38     	; 0x122e <__mulsf3_pse+0x88>
    1208:	f1 f0       	breq	.+60     	; 0x1246 <__mulsf3_pse+0xa0>
    120a:	88 23       	and	r24, r24
    120c:	4a f0       	brmi	.+18     	; 0x1220 <__mulsf3_pse+0x7a>
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	bb 1f       	adc	r27, r27
    1214:	66 1f       	adc	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	88 1f       	adc	r24, r24
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	50 40       	sbci	r21, 0x00	; 0
    121e:	a9 f7       	brne	.-22     	; 0x120a <__mulsf3_pse+0x64>
    1220:	9e 3f       	cpi	r25, 0xFE	; 254
    1222:	51 05       	cpc	r21, r1
    1224:	80 f0       	brcs	.+32     	; 0x1246 <__mulsf3_pse+0xa0>
    1226:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__fp_inf>
    122a:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_szero>
    122e:	5f 3f       	cpi	r21, 0xFF	; 255
    1230:	e4 f3       	brlt	.-8      	; 0x122a <__mulsf3_pse+0x84>
    1232:	98 3e       	cpi	r25, 0xE8	; 232
    1234:	d4 f3       	brlt	.-12     	; 0x122a <__mulsf3_pse+0x84>
    1236:	86 95       	lsr	r24
    1238:	77 95       	ror	r23
    123a:	67 95       	ror	r22
    123c:	b7 95       	ror	r27
    123e:	f7 95       	ror	r31
    1240:	e7 95       	ror	r30
    1242:	9f 5f       	subi	r25, 0xFF	; 255
    1244:	c1 f7       	brne	.-16     	; 0x1236 <__mulsf3_pse+0x90>
    1246:	fe 2b       	or	r31, r30
    1248:	88 0f       	add	r24, r24
    124a:	91 1d       	adc	r25, r1
    124c:	96 95       	lsr	r25
    124e:	87 95       	ror	r24
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__fp_cmp>:
    1254:	99 0f       	add	r25, r25
    1256:	00 08       	sbc	r0, r0
    1258:	55 0f       	add	r21, r21
    125a:	aa 0b       	sbc	r26, r26
    125c:	e0 e8       	ldi	r30, 0x80	; 128
    125e:	fe ef       	ldi	r31, 0xFE	; 254
    1260:	16 16       	cp	r1, r22
    1262:	17 06       	cpc	r1, r23
    1264:	e8 07       	cpc	r30, r24
    1266:	f9 07       	cpc	r31, r25
    1268:	c0 f0       	brcs	.+48     	; 0x129a <__fp_cmp+0x46>
    126a:	12 16       	cp	r1, r18
    126c:	13 06       	cpc	r1, r19
    126e:	e4 07       	cpc	r30, r20
    1270:	f5 07       	cpc	r31, r21
    1272:	98 f0       	brcs	.+38     	; 0x129a <__fp_cmp+0x46>
    1274:	62 1b       	sub	r22, r18
    1276:	73 0b       	sbc	r23, r19
    1278:	84 0b       	sbc	r24, r20
    127a:	95 0b       	sbc	r25, r21
    127c:	39 f4       	brne	.+14     	; 0x128c <__fp_cmp+0x38>
    127e:	0a 26       	eor	r0, r26
    1280:	61 f0       	breq	.+24     	; 0x129a <__fp_cmp+0x46>
    1282:	23 2b       	or	r18, r19
    1284:	24 2b       	or	r18, r20
    1286:	25 2b       	or	r18, r21
    1288:	21 f4       	brne	.+8      	; 0x1292 <__fp_cmp+0x3e>
    128a:	08 95       	ret
    128c:	0a 26       	eor	r0, r26
    128e:	09 f4       	brne	.+2      	; 0x1292 <__fp_cmp+0x3e>
    1290:	a1 40       	sbci	r26, 0x01	; 1
    1292:	a6 95       	lsr	r26
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	81 1d       	adc	r24, r1
    1298:	81 1d       	adc	r24, r1
    129a:	08 95       	ret

0000129c <__divmodsi4>:
    129c:	05 2e       	mov	r0, r21
    129e:	97 fb       	bst	r25, 7
    12a0:	1e f4       	brtc	.+6      	; 0x12a8 <__divmodsi4+0xc>
    12a2:	00 94       	com	r0
    12a4:	0e 94 65 09 	call	0x12ca	; 0x12ca <__negsi2>
    12a8:	57 fd       	sbrc	r21, 7
    12aa:	07 d0       	rcall	.+14     	; 0x12ba <__divmodsi4_neg2>
    12ac:	0e 94 6d 09 	call	0x12da	; 0x12da <__udivmodsi4>
    12b0:	07 fc       	sbrc	r0, 7
    12b2:	03 d0       	rcall	.+6      	; 0x12ba <__divmodsi4_neg2>
    12b4:	4e f4       	brtc	.+18     	; 0x12c8 <__divmodsi4_exit>
    12b6:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__negsi2>

000012ba <__divmodsi4_neg2>:
    12ba:	50 95       	com	r21
    12bc:	40 95       	com	r20
    12be:	30 95       	com	r19
    12c0:	21 95       	neg	r18
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	4f 4f       	sbci	r20, 0xFF	; 255
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255

000012c8 <__divmodsi4_exit>:
    12c8:	08 95       	ret

000012ca <__negsi2>:
    12ca:	90 95       	com	r25
    12cc:	80 95       	com	r24
    12ce:	70 95       	com	r23
    12d0:	61 95       	neg	r22
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__udivmodsi4>:
    12da:	a1 e2       	ldi	r26, 0x21	; 33
    12dc:	1a 2e       	mov	r1, r26
    12de:	aa 1b       	sub	r26, r26
    12e0:	bb 1b       	sub	r27, r27
    12e2:	fd 01       	movw	r30, r26
    12e4:	0d c0       	rjmp	.+26     	; 0x1300 <__udivmodsi4_ep>

000012e6 <__udivmodsi4_loop>:
    12e6:	aa 1f       	adc	r26, r26
    12e8:	bb 1f       	adc	r27, r27
    12ea:	ee 1f       	adc	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	a2 17       	cp	r26, r18
    12f0:	b3 07       	cpc	r27, r19
    12f2:	e4 07       	cpc	r30, r20
    12f4:	f5 07       	cpc	r31, r21
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__udivmodsi4_ep>
    12f8:	a2 1b       	sub	r26, r18
    12fa:	b3 0b       	sbc	r27, r19
    12fc:	e4 0b       	sbc	r30, r20
    12fe:	f5 0b       	sbc	r31, r21

00001300 <__udivmodsi4_ep>:
    1300:	66 1f       	adc	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	1a 94       	dec	r1
    130a:	69 f7       	brne	.-38     	; 0x12e6 <__udivmodsi4_loop>
    130c:	60 95       	com	r22
    130e:	70 95       	com	r23
    1310:	80 95       	com	r24
    1312:	90 95       	com	r25
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	bd 01       	movw	r22, r26
    131a:	cf 01       	movw	r24, r30
    131c:	08 95       	ret

0000131e <_exit>:
    131e:	f8 94       	cli

00001320 <__stop_program>:
    1320:	ff cf       	rjmp	.-2      	; 0x1320 <__stop_program>
