
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000d32  00000dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000dd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ef  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a84  00000000  00000000  000029a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef9  00000000  00000000  00003427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00004320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094c  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c13  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
  8a:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TMR0_init>
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	63 e0       	ldi	r22, 0x03	; 3
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	9c 2f       	mov	r25, r28
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	89 2b       	or	r24, r25
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
  e4:	20 e1       	ldi	r18, 0x10	; 16
  e6:	c2 9f       	mul	r28, r18
  e8:	c0 01       	movw	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	9b b3       	in	r25, 0x1b	; 27
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	89 2b       	or	r24, r25
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <LCD_init>:
 124:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TMR0_init>
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	64 e0       	ldi	r22, 0x04	; 4
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
 16e:	64 e1       	ldi	r22, 0x14	; 20
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
 17a:	83 e3       	ldi	r24, 0x33	; 51
 17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 1a4:	08 95       	ret

000001a6 <LCD_writechar>:
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	9c 2f       	mov	r25, r28
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	89 2b       	or	r24, r25
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 1f4:	20 e1       	ldi	r18, 0x10	; 16
 1f6:	c2 9f       	mul	r28, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	9b b3       	in	r25, 0x1b	; 27
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	89 2b       	or	r24, r25
 202:	8b bb       	out	0x1b, r24	; 27
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	63 e0       	ldi	r22, 0x03	; 3
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 224:	65 e0       	ldi	r22, 0x05	; 5
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <LCD_writestr>:
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	8c 01       	movw	r16, r24
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_writestr+0x12>
 240:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_writechar>
 244:	cf 5f       	subi	r28, 0xFF	; 255
 246:	f8 01       	movw	r30, r16
 248:	ec 0f       	add	r30, r28
 24a:	f1 1d       	adc	r31, r1
 24c:	80 81       	ld	r24, Z
 24e:	81 11       	cpse	r24, r1
 250:	f7 cf       	rjmp	.-18     	; 0x240 <LCD_writestr+0xc>
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <LCD_goto>:
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <LCD_goto+0x6>
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	90 e8       	ldi	r25, 0x80	; 128
 266:	99 83       	std	Y+1, r25	; 0x01
 268:	90 ec       	ldi	r25, 0xC0	; 192
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	e1 e0       	ldi	r30, 0x01	; 1
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	e8 0f       	add	r30, r24
 276:	f1 1d       	adc	r31, r1
 278:	80 81       	ld	r24, Z
 27a:	86 0f       	add	r24, r22
 27c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	2a 97       	sbiw	r28, 0x0a	; 10
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
 2a0:	99 23       	and	r25, r25
 2a2:	dc f5       	brge	.+118    	; 0x31a <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
 2a4:	90 95       	com	r25
 2a6:	80 95       	com	r24
 2a8:	70 95       	com	r23
 2aa:	61 95       	neg	r22
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	8f 4f       	sbci	r24, 0xFF	; 255
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
 2b2:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
 2b4:	13 c0       	rjmp	.+38     	; 0x2dc <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
 2b6:	2a e0       	ldi	r18, 0x0A	; 10
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	0e 94 56 06 	call	0xcac	; 0xcac <__divmodsi4>
 2c2:	e1 e0       	ldi	r30, 0x01	; 1
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ec 0f       	add	r30, r28
 2c8:	fd 1f       	adc	r31, r29
 2ca:	e1 0f       	add	r30, r17
 2cc:	f1 1d       	adc	r31, r1
 2ce:	60 5d       	subi	r22, 0xD0	; 208
 2d0:	60 83       	st	Z, r22
			s32_a_num /= 10;
 2d2:	62 2f       	mov	r22, r18
 2d4:	73 2f       	mov	r23, r19
 2d6:	84 2f       	mov	r24, r20
 2d8:	95 2f       	mov	r25, r21
			i++;
 2da:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
 2dc:	16 16       	cp	r1, r22
 2de:	17 06       	cpc	r1, r23
 2e0:	18 06       	cpc	r1, r24
 2e2:	19 06       	cpc	r1, r25
 2e4:	44 f3       	brlt	.-48     	; 0x2b6 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
 2e6:	e1 e0       	ldi	r30, 0x01	; 1
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ec 0f       	add	r30, r28
 2ec:	fd 1f       	adc	r31, r29
 2ee:	e1 0f       	add	r30, r17
 2f0:	f1 1d       	adc	r31, r1
 2f2:	8d e2       	ldi	r24, 0x2D	; 45
 2f4:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
 2f6:	1f 5f       	subi	r17, 0xFF	; 255
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
 2fa:	e1 2f       	mov	r30, r17
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	8c 0f       	add	r24, r28
 306:	9d 1f       	adc	r25, r29
 308:	e8 0f       	add	r30, r24
 30a:	f9 1f       	adc	r31, r25
 30c:	80 81       	ld	r24, Z
 30e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
 312:	11 50       	subi	r17, 0x01	; 1
 314:	11 11       	cpse	r17, r1
 316:	f1 cf       	rjmp	.-30     	; 0x2fa <LCD_writeint+0x70>
 318:	39 c0       	rjmp	.+114    	; 0x38c <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	81 05       	cpc	r24, r1
 320:	91 05       	cpc	r25, r1
 322:	21 f4       	brne	.+8      	; 0x32c <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
 324:	80 e3       	ldi	r24, 0x30	; 48
 326:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_writechar>
 32a:	30 c0       	rjmp	.+96     	; 0x38c <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
 32c:	16 16       	cp	r1, r22
 32e:	17 06       	cpc	r1, r23
 330:	18 06       	cpc	r1, r24
 332:	19 06       	cpc	r1, r25
 334:	ac f0       	brlt	.+42     	; 0x360 <LCD_writeint+0xd6>
 336:	2a c0       	rjmp	.+84     	; 0x38c <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
 338:	2a e0       	ldi	r18, 0x0A	; 10
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	0e 94 56 06 	call	0xcac	; 0xcac <__divmodsi4>
 344:	e1 e0       	ldi	r30, 0x01	; 1
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ec 0f       	add	r30, r28
 34a:	fd 1f       	adc	r31, r29
 34c:	e1 0f       	add	r30, r17
 34e:	f1 1d       	adc	r31, r1
 350:	60 5d       	subi	r22, 0xD0	; 208
 352:	60 83       	st	Z, r22
			s32_a_num /= 10;
 354:	62 2f       	mov	r22, r18
 356:	73 2f       	mov	r23, r19
 358:	84 2f       	mov	r24, r20
 35a:	95 2f       	mov	r25, r21
			i++;
 35c:	1f 5f       	subi	r17, 0xFF	; 255
 35e:	01 c0       	rjmp	.+2      	; 0x362 <LCD_writeint+0xd8>
 360:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
 362:	16 16       	cp	r1, r22
 364:	17 06       	cpc	r1, r23
 366:	18 06       	cpc	r1, r24
 368:	19 06       	cpc	r1, r25
 36a:	34 f3       	brlt	.-52     	; 0x338 <LCD_writeint+0xae>
 36c:	0d c0       	rjmp	.+26     	; 0x388 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
 36e:	e1 2f       	mov	r30, r17
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	8c 0f       	add	r24, r28
 37a:	9d 1f       	adc	r25, r29
 37c:	e8 0f       	add	r30, r24
 37e:	f9 1f       	adc	r31, r25
 380:	80 81       	ld	r24, Z
 382:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
 386:	11 50       	subi	r17, 0x01	; 1
 388:	11 11       	cpse	r17, r1
 38a:	f1 cf       	rjmp	.-30     	; 0x36e <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
 38c:	2a 96       	adiw	r28, 0x0a	; 10
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <USONIC_init>:
#include "../../MCAL/timer1/timer1_interface.h"
#include "../../MCAL/dio/DIO_interface.h"

void USONIC_init(void)
{
	DIO_setpindir(DIO_PORTD, DIO_PIN1, DIO_PIN_OUTPUT);
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
	DIO_setpindir(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
	TMR1_init();
 3b4:	0e 94 8c 04 	call	0x918	; 0x918 <TMR1_init>
 3b8:	08 95       	ret

000003ba <USONIC_getdistance>:
}

EN_USONIC_STATUS USONIC_getdistance(uint8_t *u8_a_distance)
{
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <USONIC_getdistance+0xa>
 3c4:	1f 92       	push	r1
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	8c 01       	movw	r16, r24
	
	uint8_t echo=0;
 3cc:	19 82       	std	Y+1, r1	; 0x01
	uint16t duration_ticks=0;
 3ce:	1b 82       	std	Y+3, r1	; 0x03
 3d0:	1a 82       	std	Y+2, r1	; 0x02
	double duration_us=0;
	int distance=0;
	
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_HIGH);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
	TMR0_delaymicos(10);
 3dc:	6a e0       	ldi	r22, 0x0A	; 10
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 57 04 	call	0x8ae	; 0x8ae <TMR0_delaymicos>
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_LOW);
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
	DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
 3f2:	ae 01       	movw	r20, r28
 3f4:	4f 5f       	subi	r20, 0xFF	; 255
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_readpin>
	DIO_setpinvalue(DIO_PORTB, DIO_PIN7, DIO_PIN_HIGH);
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	67 e0       	ldi	r22, 0x07	; 7
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
	while(echo)
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
 40c:	ae 01       	movw	r20, r28
 40e:	4f 5f       	subi	r20, 0xFF	; 255
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_readpin>
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_HIGH);
	TMR0_delaymicos(10);
	DIO_setpinvalue(DIO_PORTD, DIO_PIN1, DIO_PIN_LOW);
	DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	DIO_setpinvalue(DIO_PORTB, DIO_PIN7, DIO_PIN_HIGH);
	while(echo)
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	81 11       	cpse	r24, r1
 41e:	f6 cf       	rjmp	.-20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	TMR1_start();
 420:	0e 94 9f 04 	call	0x93e	; 0x93e <TMR1_start>
	while(!echo)
 424:	07 c0       	rjmp	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
 426:	ae 01       	movw	r20, r28
 428:	4f 5f       	subi	r20, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_readpin>
	while(echo)
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	TMR1_start();
	while(!echo)
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	88 23       	and	r24, r24
 438:	b1 f3       	breq	.-20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	DIO_setpinvalue(DIO_PORTB, DIO_PIN5, DIO_PIN_HIGH);
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	65 e0       	ldi	r22, 0x05	; 5
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
	//TMR1_start();
	TMR1_setvalue(0);
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 b0 04 	call	0x960	; 0x960 <TMR1_setvalue>
	while(echo)
 44c:	07 c0       	rjmp	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
 44e:	ae 01       	movw	r20, r28
 450:	4f 5f       	subi	r20, 0xFF	; 255
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	0e 94 b6 03 	call	0x76c	; 0x76c <DIO_readpin>
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	DIO_setpinvalue(DIO_PORTB, DIO_PIN5, DIO_PIN_HIGH);
	//TMR1_start();
	TMR1_setvalue(0);
	while(echo)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	81 11       	cpse	r24, r1
 460:	f6 cf       	rjmp	.-20     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	{
		DIO_readpin(DIO_PORTD, DIO_PIN2, &echo);
	}
	
	TMR1_getvalue(&duration_ticks);
 462:	ce 01       	movw	r24, r28
 464:	02 96       	adiw	r24, 0x02	; 2
 466:	0e 94 aa 04 	call	0x954	; 0x954 <TMR1_getvalue>
	DIO_setpinvalue(DIO_PORTB, DIO_PIN6, DIO_PIN_HIGH);
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	66 e0       	ldi	r22, 0x06	; 6
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
	//TMR1_stop();
	duration_us = duration_ticks / 8;
 474:	6a 81       	ldd	r22, Y+2	; 0x02
 476:	7b 81       	ldd	r23, Y+3	; 0x03
 478:	76 95       	lsr	r23
 47a:	67 95       	ror	r22
 47c:	76 95       	lsr	r23
 47e:	67 95       	ror	r22
 480:	76 95       	lsr	r23
 482:	67 95       	ror	r22
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 5b 05 	call	0xab6	; 0xab6 <__floatunsisf>
	distance = duration_us * 0.017;
 48c:	26 e9       	ldi	r18, 0x96	; 150
 48e:	33 e4       	ldi	r19, 0x43	; 67
 490:	4b e8       	ldi	r20, 0x8B	; 139
 492:	5c e3       	ldi	r21, 0x3C	; 60
 494:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__mulsf3>
 498:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fixsfsi>
	*u8_a_distance = distance;
 49c:	f8 01       	movw	r30, r16
 49e:	60 83       	st	Z, r22
	return USONIC_SUCCESS;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	08 95       	ret

000004b2 <main>:
#include "MCAL/dio/DIO_interface.h"



int main(void)
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	1f 92       	push	r1
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
	//APP_init();
	
	DIO_setpindir(DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT);
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	65 e0       	ldi	r22, 0x05	; 5
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
	DIO_setpindir(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	66 e0       	ldi	r22, 0x06	; 6
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
	DIO_setpindir(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	67 e0       	ldi	r22, 0x07	; 7
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 b8 02 	call	0x570	; 0x570 <DIO_setpindir>
	
	TMR0_init();
 4da:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TMR0_init>
	
	LCD_init();
 4de:	0e 94 92 00 	call	0x124	; 0x124 <LCD_init>
	TMR0_delayms(50);
 4e2:	62 e3       	ldi	r22, 0x32	; 50
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
	
	
	TMR0_delayms(50);
 4ee:	62 e3       	ldi	r22, 0x32	; 50
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
    /* Replace with your application code */
    LCD_writestr("Mohab");
 4fa:	80 e6       	ldi	r24, 0x60	; 96
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_writestr>
	
	USONIC_init();
 502:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <USONIC_init>
	while (1) 
    {
		uint8_t distance;
		USONIC_getdistance(&distance);
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <USONIC_getdistance>
		LCD_sendcmd(LCD_CLEAR);
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 49 00 	call	0x92	; 0x92 <LCD_sendcmd>
		
		TMR0_delayms(50);
 514:	62 e3       	ldi	r22, 0x32	; 50
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
		LCD_goto(0,0);
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_goto>
		LCD_writestr("Distance");
 528:	86 e6       	ldi	r24, 0x66	; 102
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_writestr>
		LCD_goto(1,0);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_goto>
		LCD_writeint(distance);	
 538:	69 81       	ldd	r22, Y+1	; 0x01
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_writeint>
		DIO_setpinvalue(DIO_PORTB, DIO_PIN6, DIO_PIN_LOW);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	66 e0       	ldi	r22, 0x06	; 6
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
		TMR0_delayms(1000);
 54e:	68 ee       	ldi	r22, 0xE8	; 232
 550:	73 e0       	ldi	r23, 0x03	; 3
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 1b 04 	call	0x836	; 0x836 <TMR0_delayms>
		DIO_setpinvalue(DIO_PORTB, DIO_PIN5, DIO_PIN_LOW);
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	65 e0       	ldi	r22, 0x05	; 5
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
		DIO_setpinvalue(DIO_PORTB, DIO_PIN7, DIO_PIN_LOW);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	67 e0       	ldi	r22, 0x07	; 7
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_setpinvalue>
 56e:	cb cf       	rjmp	.-106    	; 0x506 <main+0x54>

00000570 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 570:	44 23       	and	r20, r20
 572:	19 f0       	breq	.+6      	; 0x57a <DIO_setpindir+0xa>
 574:	41 30       	cpi	r20, 0x01	; 1
 576:	e9 f1       	breq	.+122    	; 0x5f2 <DIO_setpindir+0x82>
 578:	74 c0       	rjmp	.+232    	; 0x662 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	99 f0       	breq	.+38     	; 0x5a4 <DIO_setpindir+0x34>
 57e:	28 f0       	brcs	.+10     	; 0x58a <DIO_setpindir+0x1a>
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	e9 f0       	breq	.+58     	; 0x5be <DIO_setpindir+0x4e>
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	41 f1       	breq	.+80     	; 0x5d8 <DIO_setpindir+0x68>
 588:	6e c0       	rjmp	.+220    	; 0x666 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 58a:	2a b3       	in	r18, 0x1a	; 26
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_setpindir+0x26>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_setpindir+0x22>
 59a:	80 95       	com	r24
 59c:	82 23       	and	r24, r18
 59e:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5a0:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 5a2:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 5a4:	27 b3       	in	r18, 0x17	; 23
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_setpindir+0x40>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_setpindir+0x3c>
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5ba:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 5bc:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 5be:	24 b3       	in	r18, 0x14	; 20
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_setpindir+0x5a>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_setpindir+0x56>
 5ce:	80 95       	com	r24
 5d0:	82 23       	and	r24, r18
 5d2:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5d4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 5d6:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 5d8:	21 b3       	in	r18, 0x11	; 17
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_setpindir+0x74>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_setpindir+0x70>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5ee:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 5f0:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	91 f0       	breq	.+36     	; 0x61a <DIO_setpindir+0xaa>
 5f6:	28 f0       	brcs	.+10     	; 0x602 <DIO_setpindir+0x92>
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	d9 f0       	breq	.+54     	; 0x632 <DIO_setpindir+0xc2>
 5fc:	83 30       	cpi	r24, 0x03	; 3
 5fe:	29 f1       	breq	.+74     	; 0x64a <DIO_setpindir+0xda>
 600:	34 c0       	rjmp	.+104    	; 0x66a <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 602:	2a b3       	in	r18, 0x1a	; 26
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_setpindir+0x9e>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_setpindir+0x9a>
 612:	82 2b       	or	r24, r18
 614:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 616:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 618:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 61a:	27 b3       	in	r18, 0x17	; 23
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_setpindir+0xb6>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_setpindir+0xb2>
 62a:	82 2b       	or	r24, r18
 62c:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 62e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 630:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 632:	24 b3       	in	r18, 0x14	; 20
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_setpindir+0xce>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_setpindir+0xca>
 642:	82 2b       	or	r24, r18
 644:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 646:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 648:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 64a:	21 b3       	in	r18, 0x11	; 17
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_setpindir+0xe6>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_setpindir+0xe2>
 65a:	82 2b       	or	r24, r18
 65c:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 65e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 660:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 66a:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 66c:	08 95       	ret

0000066e <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 66e:	44 23       	and	r20, r20
 670:	19 f0       	breq	.+6      	; 0x678 <DIO_setpinvalue+0xa>
 672:	41 30       	cpi	r20, 0x01	; 1
 674:	e9 f1       	breq	.+122    	; 0x6f0 <DIO_setpinvalue+0x82>
 676:	74 c0       	rjmp	.+232    	; 0x760 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	99 f0       	breq	.+38     	; 0x6a2 <DIO_setpinvalue+0x34>
 67c:	28 f0       	brcs	.+10     	; 0x688 <DIO_setpinvalue+0x1a>
 67e:	82 30       	cpi	r24, 0x02	; 2
 680:	e9 f0       	breq	.+58     	; 0x6bc <DIO_setpinvalue+0x4e>
 682:	83 30       	cpi	r24, 0x03	; 3
 684:	41 f1       	breq	.+80     	; 0x6d6 <DIO_setpinvalue+0x68>
 686:	6e c0       	rjmp	.+220    	; 0x764 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 688:	2b b3       	in	r18, 0x1b	; 27
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_setpinvalue+0x26>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_setpinvalue+0x22>
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 69e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 6a0:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 6a2:	28 b3       	in	r18, 0x18	; 24
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_setpinvalue+0x40>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_setpinvalue+0x3c>
 6b2:	80 95       	com	r24
 6b4:	82 23       	and	r24, r18
 6b6:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6b8:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 6ba:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 6bc:	25 b3       	in	r18, 0x15	; 21
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_setpinvalue+0x5a>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_setpinvalue+0x56>
 6cc:	80 95       	com	r24
 6ce:	82 23       	and	r24, r18
 6d0:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6d2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 6d4:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 6d6:	22 b3       	in	r18, 0x12	; 18
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_setpinvalue+0x74>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_setpinvalue+0x70>
 6e6:	80 95       	com	r24
 6e8:	82 23       	and	r24, r18
 6ea:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6ec:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 6ee:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	91 f0       	breq	.+36     	; 0x718 <DIO_setpinvalue+0xaa>
 6f4:	28 f0       	brcs	.+10     	; 0x700 <DIO_setpinvalue+0x92>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	d9 f0       	breq	.+54     	; 0x730 <DIO_setpinvalue+0xc2>
 6fa:	83 30       	cpi	r24, 0x03	; 3
 6fc:	29 f1       	breq	.+74     	; 0x748 <DIO_setpinvalue+0xda>
 6fe:	34 c0       	rjmp	.+104    	; 0x768 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 700:	2b b3       	in	r18, 0x1b	; 27
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_setpinvalue+0x9e>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_setpinvalue+0x9a>
 710:	82 2b       	or	r24, r18
 712:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 714:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 716:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 718:	28 b3       	in	r18, 0x18	; 24
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_setpinvalue+0xb6>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_setpinvalue+0xb2>
 728:	82 2b       	or	r24, r18
 72a:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 72c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 72e:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 730:	25 b3       	in	r18, 0x15	; 21
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_setpinvalue+0xce>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_setpinvalue+0xca>
 740:	82 2b       	or	r24, r18
 742:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 744:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 746:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 748:	22 b3       	in	r18, 0x12	; 18
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <DIO_setpinvalue+0xe6>
 750:	88 0f       	add	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	6a 95       	dec	r22
 756:	e2 f7       	brpl	.-8      	; 0x750 <DIO_setpinvalue+0xe2>
 758:	82 2b       	or	r24, r18
 75a:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 75c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 75e:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 768:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 76a:	08 95       	ret

0000076c <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
 76c:	81 30       	cpi	r24, 0x01	; 1
 76e:	99 f0       	breq	.+38     	; 0x796 <DIO_readpin+0x2a>
 770:	28 f0       	brcs	.+10     	; 0x77c <DIO_readpin+0x10>
 772:	82 30       	cpi	r24, 0x02	; 2
 774:	e9 f0       	breq	.+58     	; 0x7b0 <DIO_readpin+0x44>
 776:	83 30       	cpi	r24, 0x03	; 3
 778:	41 f1       	breq	.+80     	; 0x7ca <DIO_readpin+0x5e>
 77a:	34 c0       	rjmp	.+104    	; 0x7e4 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 77c:	89 b3       	in	r24, 0x19	; 25
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_readpin+0x1a>
 782:	95 95       	asr	r25
 784:	87 95       	ror	r24
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_readpin+0x16>
 78a:	81 70       	andi	r24, 0x01	; 1
 78c:	89 bb       	out	0x19, r24	; 25
 78e:	fa 01       	movw	r30, r20
 790:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 792:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 794:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 796:	86 b3       	in	r24, 0x16	; 22
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_readpin+0x34>
 79c:	95 95       	asr	r25
 79e:	87 95       	ror	r24
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_readpin+0x30>
 7a4:	81 70       	andi	r24, 0x01	; 1
 7a6:	86 bb       	out	0x16, r24	; 22
 7a8:	fa 01       	movw	r30, r20
 7aa:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 7ac:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 7ae:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 7b0:	83 b3       	in	r24, 0x13	; 19
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_readpin+0x4e>
 7b6:	95 95       	asr	r25
 7b8:	87 95       	ror	r24
 7ba:	6a 95       	dec	r22
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_readpin+0x4a>
 7be:	81 70       	andi	r24, 0x01	; 1
 7c0:	83 bb       	out	0x13, r24	; 19
 7c2:	fa 01       	movw	r30, r20
 7c4:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 7c6:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 7c8:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
 7ca:	80 b3       	in	r24, 0x10	; 16
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <DIO_readpin+0x68>
 7d0:	95 95       	asr	r25
 7d2:	87 95       	ror	r24
 7d4:	6a 95       	dec	r22
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <DIO_readpin+0x64>
 7d8:	81 70       	andi	r24, 0x01	; 1
 7da:	80 bb       	out	0x10, r24	; 16
 7dc:	fa 01       	movw	r30, r20
 7de:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
 7e0:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
 7e2:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
 7e4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
 7e6:	08 95       	ret

000007e8 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 7e8:	83 b7       	in	r24, 0x33	; 51
 7ea:	8f 77       	andi	r24, 0x7F	; 127
 7ec:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 7ee:	83 b7       	in	r24, 0x33	; 51
 7f0:	8f 7b       	andi	r24, 0xBF	; 191
 7f2:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 7f4:	83 b7       	in	r24, 0x33	; 51
 7f6:	87 7f       	andi	r24, 0xF7	; 247
 7f8:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 7fa:	83 b7       	in	r24, 0x33	; 51
 7fc:	8f 7e       	andi	r24, 0xEF	; 239
 7fe:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 800:	83 b7       	in	r24, 0x33	; 51
 802:	8f 7d       	andi	r24, 0xDF	; 223
 804:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	08 95       	ret

0000080a <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == PRESCALER_64
	
	set_bit(TCCR0 , 0);
 80a:	83 b7       	in	r24, 0x33	; 51
 80c:	81 60       	ori	r24, 0x01	; 1
 80e:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 1);
 810:	83 b7       	in	r24, 0x33	; 51
 812:	82 60       	ori	r24, 0x02	; 2
 814:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 816:	83 b7       	in	r24, 0x33	; 51
 818:	8b 7f       	andi	r24, 0xFB	; 251
 81a:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	08 95       	ret

00000820 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 820:	83 b7       	in	r24, 0x33	; 51
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 826:	83 b7       	in	r24, 0x33	; 51
 828:	8d 7f       	andi	r24, 0xFD	; 253
 82a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	8b 7f       	andi	r24, 0xFB	; 251
 830:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	08 95       	ret

00000836 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == PRESCALER_64
		
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 2.048);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 836:	0e 94 5b 05 	call	0xab6	; 0xab6 <__floatunsisf>
 83a:	2f e6       	ldi	r18, 0x6F	; 111
 83c:	32 e1       	ldi	r19, 0x12	; 18
 83e:	43 e0       	ldi	r20, 0x03	; 3
 840:	50 e4       	ldi	r21, 0x40	; 64
 842:	0e 94 b3 04 	call	0x966	; 0x966 <__divsf3>
 846:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fixunssfsi>
 84a:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__data_end>
 84e:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <__data_end+0x1>
 852:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end+0x2>
 856:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 85a:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 85c:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 860:	40 e0       	ldi	r20, 0x00	; 0
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 866:	0a c0       	rjmp	.+20     	; 0x87c <__stack+0x1d>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 868:	08 b6       	in	r0, 0x38	; 56
 86a:	00 fe       	sbrs	r0, 0
 86c:	fd cf       	rjmp	.-6      	; 0x868 <__stack+0x9>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 86e:	88 b7       	in	r24, 0x38	; 56
 870:	81 60       	ori	r24, 0x01	; 1
 872:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 874:	4f 5f       	subi	r20, 0xFF	; 255
 876:	5f 4f       	sbci	r21, 0xFF	; 255
 878:	6f 4f       	sbci	r22, 0xFF	; 255
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 87c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 880:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 884:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <__data_end+0x2>
 888:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <__data_end+0x3>
 88c:	48 17       	cp	r20, r24
 88e:	59 07       	cpc	r21, r25
 890:	6a 07       	cpc	r22, r26
 892:	7b 07       	cpc	r23, r27
 894:	48 f3       	brcs	.-46     	; 0x868 <__stack+0x9>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 896:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
 89a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x1>
 89e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end+0x2>
 8a2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 8a6:	0e 94 10 04 	call	0x820	; 0x820 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret

000008ae <TMR0_delaymicos>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == PRESCALER_64
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 2048);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 8ae:	dc 01       	movw	r26, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	07 2e       	mov	r0, r23
 8b4:	7b e0       	ldi	r23, 0x0B	; 11
 8b6:	b6 95       	lsr	r27
 8b8:	a7 95       	ror	r26
 8ba:	97 95       	ror	r25
 8bc:	87 95       	ror	r24
 8be:	7a 95       	dec	r23
 8c0:	d1 f7       	brne	.-12     	; 0x8b6 <TMR0_delaymicos+0x8>
 8c2:	70 2d       	mov	r23, r0
 8c4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 8c8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 8cc:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <__data_end+0x2>
 8d0:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <__data_end+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 8d4:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 8d6:	0e 94 05 04 	call	0x80a	; 0x80a <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicos(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 8e0:	0a c0       	rjmp	.+20     	; 0x8f6 <TMR0_delaymicos+0x48>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 8e2:	08 b6       	in	r0, 0x38	; 56
 8e4:	00 fe       	sbrs	r0, 0
 8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <TMR0_delaymicos+0x34>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 8e8:	88 b7       	in	r24, 0x38	; 56
 8ea:	81 60       	ori	r24, 0x01	; 1
 8ec:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 8ee:	4f 5f       	subi	r20, 0xFF	; 255
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	6f 4f       	sbci	r22, 0xFF	; 255
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 8f6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 8fa:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 8fe:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <__data_end+0x2>
 902:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <__data_end+0x3>
 906:	48 17       	cp	r20, r24
 908:	59 07       	cpc	r21, r25
 90a:	6a 07       	cpc	r22, r26
 90c:	7b 07       	cpc	r23, r27
 90e:	48 f3       	brcs	.-46     	; 0x8e2 <TMR0_delaymicos+0x34>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 910:	0e 94 10 04 	call	0x820	; 0x820 <TMR0_stop>
	
	return en_a_delaystatus ; 
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	08 95       	ret

00000918 <TMR1_init>:
	
	
	#endif
	
	return u32_a_ovs ;
}
 918:	8f b5       	in	r24, 0x2f	; 47
 91a:	8e 7f       	andi	r24, 0xFE	; 254
 91c:	8f bd       	out	0x2f, r24	; 47
 91e:	8f b5       	in	r24, 0x2f	; 47
 920:	8d 7f       	andi	r24, 0xFD	; 253
 922:	8f bd       	out	0x2f, r24	; 47
 924:	8e b5       	in	r24, 0x2e	; 46
 926:	87 7f       	andi	r24, 0xF7	; 247
 928:	8e bd       	out	0x2e, r24	; 46
 92a:	8e b5       	in	r24, 0x2e	; 46
 92c:	8f 7e       	andi	r24, 0xEF	; 239
 92e:	8e bd       	out	0x2e, r24	; 46
 930:	8f b5       	in	r24, 0x2f	; 47
 932:	84 60       	ori	r24, 0x04	; 4
 934:	8f bd       	out	0x2f, r24	; 47
 936:	8f b5       	in	r24, 0x2f	; 47
 938:	88 60       	ori	r24, 0x08	; 8
 93a:	8f bd       	out	0x2f, r24	; 47
 93c:	08 95       	ret

0000093e <TMR1_start>:
 93e:	8e b5       	in	r24, 0x2e	; 46
 940:	81 60       	ori	r24, 0x01	; 1
 942:	8e bd       	out	0x2e, r24	; 46
 944:	8e b5       	in	r24, 0x2e	; 46
 946:	8d 7f       	andi	r24, 0xFD	; 253
 948:	8e bd       	out	0x2e, r24	; 46
 94a:	8e b5       	in	r24, 0x2e	; 46
 94c:	8b 7f       	andi	r24, 0xFB	; 251
 94e:	8e bd       	out	0x2e, r24	; 46
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	08 95       	ret

00000954 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
 954:	2c b5       	in	r18, 0x2c	; 44
 956:	3d b5       	in	r19, 0x2d	; 45
 958:	fc 01       	movw	r30, r24
 95a:	31 83       	std	Z+1, r19	; 0x01
 95c:	20 83       	st	Z, r18
 95e:	08 95       	ret

00000960 <TMR1_setvalue>:
}

void TMR1_setvalue(uint16t u16_a_value)
{
	TCNT1 = u16_a_value;
 960:	9d bd       	out	0x2d, r25	; 45
 962:	8c bd       	out	0x2c, r24	; 44
 964:	08 95       	ret

00000966 <__divsf3>:
 966:	0e 94 c7 04 	call	0x98e	; 0x98e <__divsf3x>
 96a:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_round>
 96e:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscB>
 972:	58 f0       	brcs	.+22     	; 0x98a <__divsf3+0x24>
 974:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscA>
 978:	40 f0       	brcs	.+16     	; 0x98a <__divsf3+0x24>
 97a:	29 f4       	brne	.+10     	; 0x986 <__divsf3+0x20>
 97c:	5f 3f       	cpi	r21, 0xFF	; 255
 97e:	29 f0       	breq	.+10     	; 0x98a <__divsf3+0x24>
 980:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_inf>
 984:	51 11       	cpse	r21, r1
 986:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_szero>
 98a:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_nan>

0000098e <__divsf3x>:
 98e:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_split3>
 992:	68 f3       	brcs	.-38     	; 0x96e <__divsf3+0x8>

00000994 <__divsf3_pse>:
 994:	99 23       	and	r25, r25
 996:	b1 f3       	breq	.-20     	; 0x984 <__divsf3+0x1e>
 998:	55 23       	and	r21, r21
 99a:	91 f3       	breq	.-28     	; 0x980 <__divsf3+0x1a>
 99c:	95 1b       	sub	r25, r21
 99e:	55 0b       	sbc	r21, r21
 9a0:	bb 27       	eor	r27, r27
 9a2:	aa 27       	eor	r26, r26
 9a4:	62 17       	cp	r22, r18
 9a6:	73 07       	cpc	r23, r19
 9a8:	84 07       	cpc	r24, r20
 9aa:	38 f0       	brcs	.+14     	; 0x9ba <__divsf3_pse+0x26>
 9ac:	9f 5f       	subi	r25, 0xFF	; 255
 9ae:	5f 4f       	sbci	r21, 0xFF	; 255
 9b0:	22 0f       	add	r18, r18
 9b2:	33 1f       	adc	r19, r19
 9b4:	44 1f       	adc	r20, r20
 9b6:	aa 1f       	adc	r26, r26
 9b8:	a9 f3       	breq	.-22     	; 0x9a4 <__divsf3_pse+0x10>
 9ba:	35 d0       	rcall	.+106    	; 0xa26 <__divsf3_pse+0x92>
 9bc:	0e 2e       	mov	r0, r30
 9be:	3a f0       	brmi	.+14     	; 0x9ce <__divsf3_pse+0x3a>
 9c0:	e0 e8       	ldi	r30, 0x80	; 128
 9c2:	32 d0       	rcall	.+100    	; 0xa28 <__divsf3_pse+0x94>
 9c4:	91 50       	subi	r25, 0x01	; 1
 9c6:	50 40       	sbci	r21, 0x00	; 0
 9c8:	e6 95       	lsr	r30
 9ca:	00 1c       	adc	r0, r0
 9cc:	ca f7       	brpl	.-14     	; 0x9c0 <__divsf3_pse+0x2c>
 9ce:	2b d0       	rcall	.+86     	; 0xa26 <__divsf3_pse+0x92>
 9d0:	fe 2f       	mov	r31, r30
 9d2:	29 d0       	rcall	.+82     	; 0xa26 <__divsf3_pse+0x92>
 9d4:	66 0f       	add	r22, r22
 9d6:	77 1f       	adc	r23, r23
 9d8:	88 1f       	adc	r24, r24
 9da:	bb 1f       	adc	r27, r27
 9dc:	26 17       	cp	r18, r22
 9de:	37 07       	cpc	r19, r23
 9e0:	48 07       	cpc	r20, r24
 9e2:	ab 07       	cpc	r26, r27
 9e4:	b0 e8       	ldi	r27, 0x80	; 128
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__divsf3_pse+0x56>
 9e8:	bb 0b       	sbc	r27, r27
 9ea:	80 2d       	mov	r24, r0
 9ec:	bf 01       	movw	r22, r30
 9ee:	ff 27       	eor	r31, r31
 9f0:	93 58       	subi	r25, 0x83	; 131
 9f2:	5f 4f       	sbci	r21, 0xFF	; 255
 9f4:	3a f0       	brmi	.+14     	; 0xa04 <__divsf3_pse+0x70>
 9f6:	9e 3f       	cpi	r25, 0xFE	; 254
 9f8:	51 05       	cpc	r21, r1
 9fa:	78 f0       	brcs	.+30     	; 0xa1a <__divsf3_pse+0x86>
 9fc:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_inf>
 a00:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_szero>
 a04:	5f 3f       	cpi	r21, 0xFF	; 255
 a06:	e4 f3       	brlt	.-8      	; 0xa00 <__divsf3_pse+0x6c>
 a08:	98 3e       	cpi	r25, 0xE8	; 232
 a0a:	d4 f3       	brlt	.-12     	; 0xa00 <__divsf3_pse+0x6c>
 a0c:	86 95       	lsr	r24
 a0e:	77 95       	ror	r23
 a10:	67 95       	ror	r22
 a12:	b7 95       	ror	r27
 a14:	f7 95       	ror	r31
 a16:	9f 5f       	subi	r25, 0xFF	; 255
 a18:	c9 f7       	brne	.-14     	; 0xa0c <__divsf3_pse+0x78>
 a1a:	88 0f       	add	r24, r24
 a1c:	91 1d       	adc	r25, r1
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret
 a26:	e1 e0       	ldi	r30, 0x01	; 1
 a28:	66 0f       	add	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	bb 1f       	adc	r27, r27
 a30:	62 17       	cp	r22, r18
 a32:	73 07       	cpc	r23, r19
 a34:	84 07       	cpc	r24, r20
 a36:	ba 07       	cpc	r27, r26
 a38:	20 f0       	brcs	.+8      	; 0xa42 <__divsf3_pse+0xae>
 a3a:	62 1b       	sub	r22, r18
 a3c:	73 0b       	sbc	r23, r19
 a3e:	84 0b       	sbc	r24, r20
 a40:	ba 0b       	sbc	r27, r26
 a42:	ee 1f       	adc	r30, r30
 a44:	88 f7       	brcc	.-30     	; 0xa28 <__divsf3_pse+0x94>
 a46:	e0 95       	com	r30
 a48:	08 95       	ret

00000a4a <__fixsfsi>:
 a4a:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fixunssfsi>
 a4e:	68 94       	set
 a50:	b1 11       	cpse	r27, r1
 a52:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_szero>
 a56:	08 95       	ret

00000a58 <__fixunssfsi>:
 a58:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fp_splitA>
 a5c:	88 f0       	brcs	.+34     	; 0xa80 <__fixunssfsi+0x28>
 a5e:	9f 57       	subi	r25, 0x7F	; 127
 a60:	98 f0       	brcs	.+38     	; 0xa88 <__fixunssfsi+0x30>
 a62:	b9 2f       	mov	r27, r25
 a64:	99 27       	eor	r25, r25
 a66:	b7 51       	subi	r27, 0x17	; 23
 a68:	b0 f0       	brcs	.+44     	; 0xa96 <__fixunssfsi+0x3e>
 a6a:	e1 f0       	breq	.+56     	; 0xaa4 <__fixunssfsi+0x4c>
 a6c:	66 0f       	add	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	1a f0       	brmi	.+6      	; 0xa7c <__fixunssfsi+0x24>
 a76:	ba 95       	dec	r27
 a78:	c9 f7       	brne	.-14     	; 0xa6c <__fixunssfsi+0x14>
 a7a:	14 c0       	rjmp	.+40     	; 0xaa4 <__fixunssfsi+0x4c>
 a7c:	b1 30       	cpi	r27, 0x01	; 1
 a7e:	91 f0       	breq	.+36     	; 0xaa4 <__fixunssfsi+0x4c>
 a80:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_zero>
 a84:	b1 e0       	ldi	r27, 0x01	; 1
 a86:	08 95       	ret
 a88:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_zero>
 a8c:	67 2f       	mov	r22, r23
 a8e:	78 2f       	mov	r23, r24
 a90:	88 27       	eor	r24, r24
 a92:	b8 5f       	subi	r27, 0xF8	; 248
 a94:	39 f0       	breq	.+14     	; 0xaa4 <__fixunssfsi+0x4c>
 a96:	b9 3f       	cpi	r27, 0xF9	; 249
 a98:	cc f3       	brlt	.-14     	; 0xa8c <__fixunssfsi+0x34>
 a9a:	86 95       	lsr	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	b3 95       	inc	r27
 aa2:	d9 f7       	brne	.-10     	; 0xa9a <__fixunssfsi+0x42>
 aa4:	3e f4       	brtc	.+14     	; 0xab4 <__fixunssfsi+0x5c>
 aa6:	90 95       	com	r25
 aa8:	80 95       	com	r24
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	08 95       	ret

00000ab6 <__floatunsisf>:
 ab6:	e8 94       	clt
 ab8:	09 c0       	rjmp	.+18     	; 0xacc <__floatsisf+0x12>

00000aba <__floatsisf>:
 aba:	97 fb       	bst	r25, 7
 abc:	3e f4       	brtc	.+14     	; 0xacc <__floatsisf+0x12>
 abe:	90 95       	com	r25
 ac0:	80 95       	com	r24
 ac2:	70 95       	com	r23
 ac4:	61 95       	neg	r22
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	99 23       	and	r25, r25
 ace:	a9 f0       	breq	.+42     	; 0xafa <__floatsisf+0x40>
 ad0:	f9 2f       	mov	r31, r25
 ad2:	96 e9       	ldi	r25, 0x96	; 150
 ad4:	bb 27       	eor	r27, r27
 ad6:	93 95       	inc	r25
 ad8:	f6 95       	lsr	r31
 ada:	87 95       	ror	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	b7 95       	ror	r27
 ae2:	f1 11       	cpse	r31, r1
 ae4:	f8 cf       	rjmp	.-16     	; 0xad6 <__floatsisf+0x1c>
 ae6:	fa f4       	brpl	.+62     	; 0xb26 <__floatsisf+0x6c>
 ae8:	bb 0f       	add	r27, r27
 aea:	11 f4       	brne	.+4      	; 0xaf0 <__floatsisf+0x36>
 aec:	60 ff       	sbrs	r22, 0
 aee:	1b c0       	rjmp	.+54     	; 0xb26 <__floatsisf+0x6c>
 af0:	6f 5f       	subi	r22, 0xFF	; 255
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	16 c0       	rjmp	.+44     	; 0xb26 <__floatsisf+0x6c>
 afa:	88 23       	and	r24, r24
 afc:	11 f0       	breq	.+4      	; 0xb02 <__floatsisf+0x48>
 afe:	96 e9       	ldi	r25, 0x96	; 150
 b00:	11 c0       	rjmp	.+34     	; 0xb24 <__floatsisf+0x6a>
 b02:	77 23       	and	r23, r23
 b04:	21 f0       	breq	.+8      	; 0xb0e <__floatsisf+0x54>
 b06:	9e e8       	ldi	r25, 0x8E	; 142
 b08:	87 2f       	mov	r24, r23
 b0a:	76 2f       	mov	r23, r22
 b0c:	05 c0       	rjmp	.+10     	; 0xb18 <__floatsisf+0x5e>
 b0e:	66 23       	and	r22, r22
 b10:	71 f0       	breq	.+28     	; 0xb2e <__floatsisf+0x74>
 b12:	96 e8       	ldi	r25, 0x86	; 134
 b14:	86 2f       	mov	r24, r22
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	2a f0       	brmi	.+10     	; 0xb26 <__floatsisf+0x6c>
 b1c:	9a 95       	dec	r25
 b1e:	66 0f       	add	r22, r22
 b20:	77 1f       	adc	r23, r23
 b22:	88 1f       	adc	r24, r24
 b24:	da f7       	brpl	.-10     	; 0xb1c <__floatsisf+0x62>
 b26:	88 0f       	add	r24, r24
 b28:	96 95       	lsr	r25
 b2a:	87 95       	ror	r24
 b2c:	97 f9       	bld	r25, 7
 b2e:	08 95       	ret

00000b30 <__fp_inf>:
 b30:	97 f9       	bld	r25, 7
 b32:	9f 67       	ori	r25, 0x7F	; 127
 b34:	80 e8       	ldi	r24, 0x80	; 128
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	60 e0       	ldi	r22, 0x00	; 0
 b3a:	08 95       	ret

00000b3c <__fp_nan>:
 b3c:	9f ef       	ldi	r25, 0xFF	; 255
 b3e:	80 ec       	ldi	r24, 0xC0	; 192
 b40:	08 95       	ret

00000b42 <__fp_pscA>:
 b42:	00 24       	eor	r0, r0
 b44:	0a 94       	dec	r0
 b46:	16 16       	cp	r1, r22
 b48:	17 06       	cpc	r1, r23
 b4a:	18 06       	cpc	r1, r24
 b4c:	09 06       	cpc	r0, r25
 b4e:	08 95       	ret

00000b50 <__fp_pscB>:
 b50:	00 24       	eor	r0, r0
 b52:	0a 94       	dec	r0
 b54:	12 16       	cp	r1, r18
 b56:	13 06       	cpc	r1, r19
 b58:	14 06       	cpc	r1, r20
 b5a:	05 06       	cpc	r0, r21
 b5c:	08 95       	ret

00000b5e <__fp_round>:
 b5e:	09 2e       	mov	r0, r25
 b60:	03 94       	inc	r0
 b62:	00 0c       	add	r0, r0
 b64:	11 f4       	brne	.+4      	; 0xb6a <__fp_round+0xc>
 b66:	88 23       	and	r24, r24
 b68:	52 f0       	brmi	.+20     	; 0xb7e <__fp_round+0x20>
 b6a:	bb 0f       	add	r27, r27
 b6c:	40 f4       	brcc	.+16     	; 0xb7e <__fp_round+0x20>
 b6e:	bf 2b       	or	r27, r31
 b70:	11 f4       	brne	.+4      	; 0xb76 <__fp_round+0x18>
 b72:	60 ff       	sbrs	r22, 0
 b74:	04 c0       	rjmp	.+8      	; 0xb7e <__fp_round+0x20>
 b76:	6f 5f       	subi	r22, 0xFF	; 255
 b78:	7f 4f       	sbci	r23, 0xFF	; 255
 b7a:	8f 4f       	sbci	r24, 0xFF	; 255
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	08 95       	ret

00000b80 <__fp_split3>:
 b80:	57 fd       	sbrc	r21, 7
 b82:	90 58       	subi	r25, 0x80	; 128
 b84:	44 0f       	add	r20, r20
 b86:	55 1f       	adc	r21, r21
 b88:	59 f0       	breq	.+22     	; 0xba0 <__fp_splitA+0x10>
 b8a:	5f 3f       	cpi	r21, 0xFF	; 255
 b8c:	71 f0       	breq	.+28     	; 0xbaa <__fp_splitA+0x1a>
 b8e:	47 95       	ror	r20

00000b90 <__fp_splitA>:
 b90:	88 0f       	add	r24, r24
 b92:	97 fb       	bst	r25, 7
 b94:	99 1f       	adc	r25, r25
 b96:	61 f0       	breq	.+24     	; 0xbb0 <__fp_splitA+0x20>
 b98:	9f 3f       	cpi	r25, 0xFF	; 255
 b9a:	79 f0       	breq	.+30     	; 0xbba <__fp_splitA+0x2a>
 b9c:	87 95       	ror	r24
 b9e:	08 95       	ret
 ba0:	12 16       	cp	r1, r18
 ba2:	13 06       	cpc	r1, r19
 ba4:	14 06       	cpc	r1, r20
 ba6:	55 1f       	adc	r21, r21
 ba8:	f2 cf       	rjmp	.-28     	; 0xb8e <__fp_split3+0xe>
 baa:	46 95       	lsr	r20
 bac:	f1 df       	rcall	.-30     	; 0xb90 <__fp_splitA>
 bae:	08 c0       	rjmp	.+16     	; 0xbc0 <__fp_splitA+0x30>
 bb0:	16 16       	cp	r1, r22
 bb2:	17 06       	cpc	r1, r23
 bb4:	18 06       	cpc	r1, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	f1 cf       	rjmp	.-30     	; 0xb9c <__fp_splitA+0xc>
 bba:	86 95       	lsr	r24
 bbc:	71 05       	cpc	r23, r1
 bbe:	61 05       	cpc	r22, r1
 bc0:	08 94       	sec
 bc2:	08 95       	ret

00000bc4 <__fp_zero>:
 bc4:	e8 94       	clt

00000bc6 <__fp_szero>:
 bc6:	bb 27       	eor	r27, r27
 bc8:	66 27       	eor	r22, r22
 bca:	77 27       	eor	r23, r23
 bcc:	cb 01       	movw	r24, r22
 bce:	97 f9       	bld	r25, 7
 bd0:	08 95       	ret

00000bd2 <__mulsf3>:
 bd2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__mulsf3x>
 bd6:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_round>
 bda:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscA>
 bde:	38 f0       	brcs	.+14     	; 0xbee <__mulsf3+0x1c>
 be0:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscB>
 be4:	20 f0       	brcs	.+8      	; 0xbee <__mulsf3+0x1c>
 be6:	95 23       	and	r25, r21
 be8:	11 f0       	breq	.+4      	; 0xbee <__mulsf3+0x1c>
 bea:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_inf>
 bee:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_nan>
 bf2:	11 24       	eor	r1, r1
 bf4:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_szero>

00000bf8 <__mulsf3x>:
 bf8:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_split3>
 bfc:	70 f3       	brcs	.-36     	; 0xbda <__mulsf3+0x8>

00000bfe <__mulsf3_pse>:
 bfe:	95 9f       	mul	r25, r21
 c00:	c1 f3       	breq	.-16     	; 0xbf2 <__mulsf3+0x20>
 c02:	95 0f       	add	r25, r21
 c04:	50 e0       	ldi	r21, 0x00	; 0
 c06:	55 1f       	adc	r21, r21
 c08:	62 9f       	mul	r22, r18
 c0a:	f0 01       	movw	r30, r0
 c0c:	72 9f       	mul	r23, r18
 c0e:	bb 27       	eor	r27, r27
 c10:	f0 0d       	add	r31, r0
 c12:	b1 1d       	adc	r27, r1
 c14:	63 9f       	mul	r22, r19
 c16:	aa 27       	eor	r26, r26
 c18:	f0 0d       	add	r31, r0
 c1a:	b1 1d       	adc	r27, r1
 c1c:	aa 1f       	adc	r26, r26
 c1e:	64 9f       	mul	r22, r20
 c20:	66 27       	eor	r22, r22
 c22:	b0 0d       	add	r27, r0
 c24:	a1 1d       	adc	r26, r1
 c26:	66 1f       	adc	r22, r22
 c28:	82 9f       	mul	r24, r18
 c2a:	22 27       	eor	r18, r18
 c2c:	b0 0d       	add	r27, r0
 c2e:	a1 1d       	adc	r26, r1
 c30:	62 1f       	adc	r22, r18
 c32:	73 9f       	mul	r23, r19
 c34:	b0 0d       	add	r27, r0
 c36:	a1 1d       	adc	r26, r1
 c38:	62 1f       	adc	r22, r18
 c3a:	83 9f       	mul	r24, r19
 c3c:	a0 0d       	add	r26, r0
 c3e:	61 1d       	adc	r22, r1
 c40:	22 1f       	adc	r18, r18
 c42:	74 9f       	mul	r23, r20
 c44:	33 27       	eor	r19, r19
 c46:	a0 0d       	add	r26, r0
 c48:	61 1d       	adc	r22, r1
 c4a:	23 1f       	adc	r18, r19
 c4c:	84 9f       	mul	r24, r20
 c4e:	60 0d       	add	r22, r0
 c50:	21 1d       	adc	r18, r1
 c52:	82 2f       	mov	r24, r18
 c54:	76 2f       	mov	r23, r22
 c56:	6a 2f       	mov	r22, r26
 c58:	11 24       	eor	r1, r1
 c5a:	9f 57       	subi	r25, 0x7F	; 127
 c5c:	50 40       	sbci	r21, 0x00	; 0
 c5e:	9a f0       	brmi	.+38     	; 0xc86 <__mulsf3_pse+0x88>
 c60:	f1 f0       	breq	.+60     	; 0xc9e <__mulsf3_pse+0xa0>
 c62:	88 23       	and	r24, r24
 c64:	4a f0       	brmi	.+18     	; 0xc78 <__mulsf3_pse+0x7a>
 c66:	ee 0f       	add	r30, r30
 c68:	ff 1f       	adc	r31, r31
 c6a:	bb 1f       	adc	r27, r27
 c6c:	66 1f       	adc	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	91 50       	subi	r25, 0x01	; 1
 c74:	50 40       	sbci	r21, 0x00	; 0
 c76:	a9 f7       	brne	.-22     	; 0xc62 <__mulsf3_pse+0x64>
 c78:	9e 3f       	cpi	r25, 0xFE	; 254
 c7a:	51 05       	cpc	r21, r1
 c7c:	80 f0       	brcs	.+32     	; 0xc9e <__mulsf3_pse+0xa0>
 c7e:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_inf>
 c82:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__fp_szero>
 c86:	5f 3f       	cpi	r21, 0xFF	; 255
 c88:	e4 f3       	brlt	.-8      	; 0xc82 <__mulsf3_pse+0x84>
 c8a:	98 3e       	cpi	r25, 0xE8	; 232
 c8c:	d4 f3       	brlt	.-12     	; 0xc82 <__mulsf3_pse+0x84>
 c8e:	86 95       	lsr	r24
 c90:	77 95       	ror	r23
 c92:	67 95       	ror	r22
 c94:	b7 95       	ror	r27
 c96:	f7 95       	ror	r31
 c98:	e7 95       	ror	r30
 c9a:	9f 5f       	subi	r25, 0xFF	; 255
 c9c:	c1 f7       	brne	.-16     	; 0xc8e <__mulsf3_pse+0x90>
 c9e:	fe 2b       	or	r31, r30
 ca0:	88 0f       	add	r24, r24
 ca2:	91 1d       	adc	r25, r1
 ca4:	96 95       	lsr	r25
 ca6:	87 95       	ror	r24
 ca8:	97 f9       	bld	r25, 7
 caa:	08 95       	ret

00000cac <__divmodsi4>:
 cac:	05 2e       	mov	r0, r21
 cae:	97 fb       	bst	r25, 7
 cb0:	1e f4       	brtc	.+6      	; 0xcb8 <__divmodsi4+0xc>
 cb2:	00 94       	com	r0
 cb4:	0e 94 6d 06 	call	0xcda	; 0xcda <__negsi2>
 cb8:	57 fd       	sbrc	r21, 7
 cba:	07 d0       	rcall	.+14     	; 0xcca <__divmodsi4_neg2>
 cbc:	0e 94 75 06 	call	0xcea	; 0xcea <__udivmodsi4>
 cc0:	07 fc       	sbrc	r0, 7
 cc2:	03 d0       	rcall	.+6      	; 0xcca <__divmodsi4_neg2>
 cc4:	4e f4       	brtc	.+18     	; 0xcd8 <__divmodsi4_exit>
 cc6:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__negsi2>

00000cca <__divmodsi4_neg2>:
 cca:	50 95       	com	r21
 ccc:	40 95       	com	r20
 cce:	30 95       	com	r19
 cd0:	21 95       	neg	r18
 cd2:	3f 4f       	sbci	r19, 0xFF	; 255
 cd4:	4f 4f       	sbci	r20, 0xFF	; 255
 cd6:	5f 4f       	sbci	r21, 0xFF	; 255

00000cd8 <__divmodsi4_exit>:
 cd8:	08 95       	ret

00000cda <__negsi2>:
 cda:	90 95       	com	r25
 cdc:	80 95       	com	r24
 cde:	70 95       	com	r23
 ce0:	61 95       	neg	r22
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	08 95       	ret

00000cea <__udivmodsi4>:
 cea:	a1 e2       	ldi	r26, 0x21	; 33
 cec:	1a 2e       	mov	r1, r26
 cee:	aa 1b       	sub	r26, r26
 cf0:	bb 1b       	sub	r27, r27
 cf2:	fd 01       	movw	r30, r26
 cf4:	0d c0       	rjmp	.+26     	; 0xd10 <__udivmodsi4_ep>

00000cf6 <__udivmodsi4_loop>:
 cf6:	aa 1f       	adc	r26, r26
 cf8:	bb 1f       	adc	r27, r27
 cfa:	ee 1f       	adc	r30, r30
 cfc:	ff 1f       	adc	r31, r31
 cfe:	a2 17       	cp	r26, r18
 d00:	b3 07       	cpc	r27, r19
 d02:	e4 07       	cpc	r30, r20
 d04:	f5 07       	cpc	r31, r21
 d06:	20 f0       	brcs	.+8      	; 0xd10 <__udivmodsi4_ep>
 d08:	a2 1b       	sub	r26, r18
 d0a:	b3 0b       	sbc	r27, r19
 d0c:	e4 0b       	sbc	r30, r20
 d0e:	f5 0b       	sbc	r31, r21

00000d10 <__udivmodsi4_ep>:
 d10:	66 1f       	adc	r22, r22
 d12:	77 1f       	adc	r23, r23
 d14:	88 1f       	adc	r24, r24
 d16:	99 1f       	adc	r25, r25
 d18:	1a 94       	dec	r1
 d1a:	69 f7       	brne	.-38     	; 0xcf6 <__udivmodsi4_loop>
 d1c:	60 95       	com	r22
 d1e:	70 95       	com	r23
 d20:	80 95       	com	r24
 d22:	90 95       	com	r25
 d24:	9b 01       	movw	r18, r22
 d26:	ac 01       	movw	r20, r24
 d28:	bd 01       	movw	r22, r26
 d2a:	cf 01       	movw	r24, r30
 d2c:	08 95       	ret

00000d2e <_exit>:
 d2e:	f8 94       	cli

00000d30 <__stop_program>:
 d30:	ff cf       	rjmp	.-2      	; 0xd30 <__stop_program>
