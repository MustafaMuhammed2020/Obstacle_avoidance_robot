
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a94  00000b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006c  0080006c  00000b34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001834  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1b  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff1  00000000  00000000  000030bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  000040b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b0  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c02  00000000  00000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000059d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  8a:	0c 94 48 05 	jmp	0xa90	; 0xa90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:

void APP_init()
{
	//u8_g_edge = 0 , u16_g_t1 = 0 , u16_g_t2 = 0 , u16_g_time = 0 ; /** INITIALIZATION FOR EDGES COUNTER **/
	
	ICU_init(); /** INITIALIZE ICU **/
  92:	0e 94 b4 00 	call	0x168	; 0x168 <ICU_init>
		
	TMR0_init(); /** INITIALIZE TIMER0 **/
  96:	0e 94 64 03 	call	0x6c8	; 0x6c8 <TMR0_init>
	
	LCD_init(); /** INITIALIZE LCD **/
  9a:	0e 94 13 01 	call	0x226	; 0x226 <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR LCD INITIALIZATION **/
  9e:	62 e3       	ldi	r22, 0x32	; 50
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
	
	TMR1_start(); /** START TIMER 1 COUNTING **/
  aa:	0e 94 c7 03 	call	0x78e	; 0x78e <TMR1_start>
  ae:	08 95       	ret

000000b0 <APP_start>:
	
}


void APP_start()
{
  b0:	08 95       	ret

000000b2 <__vector_1>:

}


ISR(INT0_vect) /** ISR OF INT0 **/
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	u8_g_edge++ ; /** COUNTER FOR EDGES **/
  d4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <u8_g_edge>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <u8_g_edge>
	
	if (u8_g_edge == 1) /** FIRST RISING EDGE **/
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	b1 f4       	brne	.+44     	; 0x10e <__vector_1+0x5c>
	{
		u16_g_t1 = ICU_getvalue() ;
  e2:	0e 94 b8 00 	call	0x170	; 0x170 <ICU_getvalue>
  e6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <u16_g_t1+0x1>
  ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <u16_g_t1>
		LCD_goto(0,0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_goto>
		LCD_writestr("t1 = ");
  f6:	80 e6       	ldi	r24, 0x60	; 96
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_writestr>
		LCD_writeint(u16_g_t1);
  fe:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <u16_g_t1>
 102:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <u16_g_t1+0x1>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_writeint>
	}
	
 	if (u8_g_edge == 2) /** SECOND RISING EDGE **/
 10e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <u8_g_edge>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c1 f4       	brne	.+48     	; 0x146 <__vector_1+0x94>
 	{
 		u16_g_t2 = ICU_getvalue();
 116:	0e 94 b8 00 	call	0x170	; 0x170 <ICU_getvalue>
 11a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 11e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 		
		LCD_goto(1,0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_goto>
		LCD_writestr("t2 = ");
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_writestr>
		LCD_writeint(u16_g_t2);
 132:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end>
 136:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <__data_end+0x1>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_writeint>
		 
		u8_g_edge = 0 ; /** REINITIALIZE THE EDGES COUNTER TO 0 **/
 142:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <u8_g_edge>
	}
	
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <ICU_init>:
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
 168:	0e 94 58 03 	call	0x6b0	; 0x6b0 <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret

00000170 <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <ICU_getvalue+0x6>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
 17a:	1a 82       	std	Y+2, r1	; 0x02
 17c:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 64 03 	call	0x6c8	; 0x6c8 <TMR0_init>
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 1ba:	8b b3       	in	r24, 0x1b	; 27
 1bc:	9c 2f       	mov	r25, r28
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	89 2b       	or	r24, r25
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 1e6:	20 e1       	ldi	r18, 0x10	; 16
 1e8:	c2 9f       	mul	r28, r18
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	9b b3       	in	r25, 0x1b	; 27
 1f0:	9f 70       	andi	r25, 0x0F	; 15
 1f2:	89 2b       	or	r24, r25
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LCD_init>:
 226:	0e 94 64 03 	call	0x6c8	; 0x6c8 <TMR0_init>
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	64 e0       	ldi	r22, 0x04	; 4
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	65 e0       	ldi	r22, 0x05	; 5
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	66 e0       	ldi	r22, 0x06	; 6
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	67 e0       	ldi	r22, 0x07	; 7
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 56 02 	call	0x4ac	; 0x4ac <DIO_setpindir>
 270:	64 e1       	ldi	r22, 0x14	; 20
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 27c:	83 e3       	ldi	r24, 0x33	; 51
 27e:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 282:	82 e3       	ldi	r24, 0x32	; 50
 284:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 2a6:	08 95       	ret

000002a8 <LCD_writechar>:
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	62 e0       	ldi	r22, 0x02	; 2
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	63 e0       	ldi	r22, 0x03	; 3
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 2ca:	8b b3       	in	r24, 0x1b	; 27
 2cc:	9c 2f       	mov	r25, r28
 2ce:	90 7f       	andi	r25, 0xF0	; 240
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	89 2b       	or	r24, r25
 2d4:	8b bb       	out	0x1b, r24	; 27
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	63 e0       	ldi	r22, 0x03	; 3
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 2f6:	20 e1       	ldi	r18, 0x10	; 16
 2f8:	c2 9f       	mul	r28, r18
 2fa:	c0 01       	movw	r24, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	9b b3       	in	r25, 0x1b	; 27
 300:	9f 70       	andi	r25, 0x0F	; 15
 302:	89 2b       	or	r24, r25
 304:	8b bb       	out	0x1b, r24	; 27
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	63 e0       	ldi	r22, 0x03	; 3
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 d5 02 	call	0x5aa	; 0x5aa <DIO_setpinvalue>
 326:	65 e0       	ldi	r22, 0x05	; 5
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 8b 03 	call	0x716	; 0x716 <TMR0_delayms>
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCD_writestr>:
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	8c 01       	movw	r16, r24
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	03 c0       	rjmp	.+6      	; 0x348 <LCD_writestr+0x12>
 342:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_writechar>
 346:	cf 5f       	subi	r28, 0xFF	; 255
 348:	f8 01       	movw	r30, r16
 34a:	ec 0f       	add	r30, r28
 34c:	f1 1d       	adc	r31, r1
 34e:	80 81       	ld	r24, Z
 350:	81 11       	cpse	r24, r1
 352:	f7 cf       	rjmp	.-18     	; 0x342 <LCD_writestr+0xc>
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <LCD_goto>:
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	00 d0       	rcall	.+0      	; 0x362 <LCD_goto+0x6>
 362:	cd b7       	in	r28, 0x3d	; 61
 364:	de b7       	in	r29, 0x3e	; 62
 366:	90 e8       	ldi	r25, 0x80	; 128
 368:	99 83       	std	Y+1, r25	; 0x01
 36a:	90 ec       	ldi	r25, 0xC0	; 192
 36c:	9a 83       	std	Y+2, r25	; 0x02
 36e:	e1 e0       	ldi	r30, 0x01	; 1
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	e8 0f       	add	r30, r24
 378:	f1 1d       	adc	r31, r1
 37a:	80 81       	ld	r24, Z
 37c:	86 0f       	add	r24, r22
 37e:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_sendcmd>
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	2a 97       	sbiw	r28, 0x0a	; 10
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
 3a2:	99 23       	and	r25, r25
 3a4:	dc f5       	brge	.+118    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	{
		s32_a_num *= -1;
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
 3b4:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
 3b6:	13 c0       	rjmp	.+38     	; 0x3de <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
 3b8:	2a e0       	ldi	r18, 0x0A	; 10
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__divmodsi4>
 3c4:	e1 e0       	ldi	r30, 0x01	; 1
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ec 0f       	add	r30, r28
 3ca:	fd 1f       	adc	r31, r29
 3cc:	e1 0f       	add	r30, r17
 3ce:	f1 1d       	adc	r31, r1
 3d0:	60 5d       	subi	r22, 0xD0	; 208
 3d2:	60 83       	st	Z, r22
			s32_a_num /= 10;
 3d4:	62 2f       	mov	r22, r18
 3d6:	73 2f       	mov	r23, r19
 3d8:	84 2f       	mov	r24, r20
 3da:	95 2f       	mov	r25, r21
			i++;
 3dc:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
 3de:	16 16       	cp	r1, r22
 3e0:	17 06       	cpc	r1, r23
 3e2:	18 06       	cpc	r1, r24
 3e4:	19 06       	cpc	r1, r25
 3e6:	44 f3       	brlt	.-48     	; 0x3b8 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
 3e8:	e1 e0       	ldi	r30, 0x01	; 1
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ec 0f       	add	r30, r28
 3ee:	fd 1f       	adc	r31, r29
 3f0:	e1 0f       	add	r30, r17
 3f2:	f1 1d       	adc	r31, r1
 3f4:	8d e2       	ldi	r24, 0x2D	; 45
 3f6:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
 3f8:	1f 5f       	subi	r17, 0xFF	; 255
 3fa:	0d c0       	rjmp	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		{
			LCD_writechar(number[k - 1]); //Display each number
 3fc:	e1 2f       	mov	r30, r17
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	8c 0f       	add	r24, r28
 408:	9d 1f       	adc	r25, r29
 40a:	e8 0f       	add	r30, r24
 40c:	f9 1f       	adc	r31, r25
 40e:	80 81       	ld	r24, Z
 410:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
 414:	11 50       	subi	r17, 0x01	; 1
 416:	11 11       	cpse	r17, r1
 418:	f1 cf       	rjmp	.-30     	; 0x3fc <LCD_writeint+0x70>
 41a:	39 c0       	rjmp	.+114    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
 41c:	61 15       	cp	r22, r1
 41e:	71 05       	cpc	r23, r1
 420:	81 05       	cpc	r24, r1
 422:	91 05       	cpc	r25, r1
 424:	21 f4       	brne	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		LCD_writechar('0');
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_writechar>
 42c:	30 c0       	rjmp	.+96     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
 42e:	16 16       	cp	r1, r22
 430:	17 06       	cpc	r1, r23
 432:	18 06       	cpc	r1, r24
 434:	19 06       	cpc	r1, r25
 436:	ac f0       	brlt	.+42     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 438:	2a c0       	rjmp	.+84     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
 43a:	2a e0       	ldi	r18, 0x0A	; 10
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	40 e0       	ldi	r20, 0x00	; 0
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	0e 94 07 05 	call	0xa0e	; 0xa0e <__divmodsi4>
 446:	e1 e0       	ldi	r30, 0x01	; 1
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	e1 0f       	add	r30, r17
 450:	f1 1d       	adc	r31, r1
 452:	60 5d       	subi	r22, 0xD0	; 208
 454:	60 83       	st	Z, r22
			s32_a_num /= 10;
 456:	62 2f       	mov	r22, r18
 458:	73 2f       	mov	r23, r19
 45a:	84 2f       	mov	r24, r20
 45c:	95 2f       	mov	r25, r21
			i++;
 45e:	1f 5f       	subi	r17, 0xFF	; 255
 460:	01 c0       	rjmp	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
 464:	16 16       	cp	r1, r22
 466:	17 06       	cpc	r1, r23
 468:	18 06       	cpc	r1, r24
 46a:	19 06       	cpc	r1, r25
 46c:	34 f3       	brlt	.-52     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
 470:	e1 2f       	mov	r30, r17
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	8c 0f       	add	r24, r28
 47c:	9d 1f       	adc	r25, r29
 47e:	e8 0f       	add	r30, r24
 480:	f9 1f       	adc	r31, r25
 482:	80 81       	ld	r24, Z
 484:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
 488:	11 50       	subi	r17, 0x01	; 1
 48a:	11 11       	cpse	r17, r1
 48c:	f1 cf       	rjmp	.-30     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
 48e:	2a 96       	adiw	r28, 0x0a	; 10
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	08 95       	ret

000004a2 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init();
 4a2:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
    /* Replace with your application code */
    while (1) 
    {
		APP_start();
 4a6:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_start>
 4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <main+0x4>

000004ac <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 4ac:	44 23       	and	r20, r20
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <DIO_setpindir+0xa>
 4b0:	41 30       	cpi	r20, 0x01	; 1
 4b2:	e9 f1       	breq	.+122    	; 0x52e <DIO_setpindir+0x82>
 4b4:	74 c0       	rjmp	.+232    	; 0x59e <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	99 f0       	breq	.+38     	; 0x4e0 <DIO_setpindir+0x34>
 4ba:	28 f0       	brcs	.+10     	; 0x4c6 <DIO_setpindir+0x1a>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	e9 f0       	breq	.+58     	; 0x4fa <DIO_setpindir+0x4e>
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	41 f1       	breq	.+80     	; 0x514 <DIO_setpindir+0x68>
 4c4:	6e c0       	rjmp	.+220    	; 0x5a2 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 4c6:	2a b3       	in	r18, 0x1a	; 26
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_setpindir+0x26>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_setpindir+0x22>
 4d6:	80 95       	com	r24
 4d8:	82 23       	and	r24, r18
 4da:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 4dc:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 4de:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 4e0:	27 b3       	in	r18, 0x17	; 23
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_setpindir+0x40>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_setpindir+0x3c>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 4f6:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 4f8:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 4fa:	24 b3       	in	r18, 0x14	; 20
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_setpindir+0x5a>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_setpindir+0x56>
 50a:	80 95       	com	r24
 50c:	82 23       	and	r24, r18
 50e:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 510:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 512:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 514:	21 b3       	in	r18, 0x11	; 17
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_setpindir+0x74>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	6a 95       	dec	r22
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_setpindir+0x70>
 524:	80 95       	com	r24
 526:	82 23       	and	r24, r18
 528:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 52a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 52c:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	91 f0       	breq	.+36     	; 0x556 <DIO_setpindir+0xaa>
 532:	28 f0       	brcs	.+10     	; 0x53e <DIO_setpindir+0x92>
 534:	82 30       	cpi	r24, 0x02	; 2
 536:	d9 f0       	breq	.+54     	; 0x56e <DIO_setpindir+0xc2>
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	29 f1       	breq	.+74     	; 0x586 <DIO_setpindir+0xda>
 53c:	34 c0       	rjmp	.+104    	; 0x5a6 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 53e:	2a b3       	in	r18, 0x1a	; 26
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_setpindir+0x9e>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_setpindir+0x9a>
 54e:	82 2b       	or	r24, r18
 550:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 552:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 554:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 556:	27 b3       	in	r18, 0x17	; 23
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_setpindir+0xb6>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_setpindir+0xb2>
 566:	82 2b       	or	r24, r18
 568:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 56a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 56c:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 56e:	24 b3       	in	r18, 0x14	; 20
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_setpindir+0xce>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_setpindir+0xca>
 57e:	82 2b       	or	r24, r18
 580:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 582:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 584:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 586:	21 b3       	in	r18, 0x11	; 17
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_setpindir+0xe6>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_setpindir+0xe2>
 596:	82 2b       	or	r24, r18
 598:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 59a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 59c:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 5a6:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 5a8:	08 95       	ret

000005aa <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 5aa:	44 23       	and	r20, r20
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <DIO_setpinvalue+0xa>
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	e9 f1       	breq	.+122    	; 0x62c <DIO_setpinvalue+0x82>
 5b2:	74 c0       	rjmp	.+232    	; 0x69c <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	99 f0       	breq	.+38     	; 0x5de <DIO_setpinvalue+0x34>
 5b8:	28 f0       	brcs	.+10     	; 0x5c4 <DIO_setpinvalue+0x1a>
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	e9 f0       	breq	.+58     	; 0x5f8 <DIO_setpinvalue+0x4e>
 5be:	83 30       	cpi	r24, 0x03	; 3
 5c0:	41 f1       	breq	.+80     	; 0x612 <DIO_setpinvalue+0x68>
 5c2:	6e c0       	rjmp	.+220    	; 0x6a0 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 5c4:	2b b3       	in	r18, 0x1b	; 27
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_setpinvalue+0x26>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_setpinvalue+0x22>
 5d4:	80 95       	com	r24
 5d6:	82 23       	and	r24, r18
 5d8:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 5da:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 5dc:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 5de:	28 b3       	in	r18, 0x18	; 24
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_setpinvalue+0x40>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_setpinvalue+0x3c>
 5ee:	80 95       	com	r24
 5f0:	82 23       	and	r24, r18
 5f2:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 5f4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 5f6:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 5f8:	25 b3       	in	r18, 0x15	; 21
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_setpinvalue+0x5a>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_setpinvalue+0x56>
 608:	80 95       	com	r24
 60a:	82 23       	and	r24, r18
 60c:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 60e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 610:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 612:	22 b3       	in	r18, 0x12	; 18
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_setpinvalue+0x74>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_setpinvalue+0x70>
 622:	80 95       	com	r24
 624:	82 23       	and	r24, r18
 626:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 628:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 62a:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	91 f0       	breq	.+36     	; 0x654 <DIO_setpinvalue+0xaa>
 630:	28 f0       	brcs	.+10     	; 0x63c <DIO_setpinvalue+0x92>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	d9 f0       	breq	.+54     	; 0x66c <DIO_setpinvalue+0xc2>
 636:	83 30       	cpi	r24, 0x03	; 3
 638:	29 f1       	breq	.+74     	; 0x684 <DIO_setpinvalue+0xda>
 63a:	34 c0       	rjmp	.+104    	; 0x6a4 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 63c:	2b b3       	in	r18, 0x1b	; 27
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_setpinvalue+0x9e>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_setpinvalue+0x9a>
 64c:	82 2b       	or	r24, r18
 64e:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 650:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 652:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 654:	28 b3       	in	r18, 0x18	; 24
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_setpinvalue+0xb6>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_setpinvalue+0xb2>
 664:	82 2b       	or	r24, r18
 666:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 668:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 66a:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 66c:	25 b3       	in	r18, 0x15	; 21
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_setpinvalue+0xce>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_setpinvalue+0xca>
 67c:	82 2b       	or	r24, r18
 67e:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 680:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 682:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 684:	22 b3       	in	r18, 0x12	; 18
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_setpinvalue+0xe6>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_setpinvalue+0xe2>
 694:	82 2b       	or	r24, r18
 696:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 698:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 69a:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 6a4:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 6a6:	08 95       	ret

000006a8 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
 6a8:	8f b7       	in	r24, 0x3f	; 63
 6aa:	80 68       	ori	r24, 0x80	; 128
 6ac:	8f bf       	out	0x3f, r24	; 63
 6ae:	08 95       	ret

000006b0 <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
 6b0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <SET_GLOBALINTERRUPT>
	
	/** CONFIGURE THE INT0 TRIGGER EVENT **/
	#if  EXTERNAL_INT0_TRIGGER   ==  INT_TRIGGER_RISING_EDGE 
	
	  set_bit(MCUCR , 0);
 6b4:	85 b7       	in	r24, 0x35	; 53
 6b6:	81 60       	ori	r24, 0x01	; 1
 6b8:	85 bf       	out	0x35, r24	; 53
	  set_bit(MCUCR , 1);
 6ba:	85 b7       	in	r24, 0x35	; 53
 6bc:	82 60       	ori	r24, 0x02	; 2
 6be:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
 6c0:	8b b7       	in	r24, 0x3b	; 59
 6c2:	80 64       	ori	r24, 0x40	; 64
 6c4:	8b bf       	out	0x3b, r24	; 59
 6c6:	08 95       	ret

000006c8 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 6c8:	83 b7       	in	r24, 0x33	; 51
 6ca:	8f 77       	andi	r24, 0x7F	; 127
 6cc:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 6ce:	83 b7       	in	r24, 0x33	; 51
 6d0:	8f 7b       	andi	r24, 0xBF	; 191
 6d2:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 6d4:	83 b7       	in	r24, 0x33	; 51
 6d6:	87 7f       	andi	r24, 0xF7	; 247
 6d8:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	8f 7e       	andi	r24, 0xEF	; 239
 6de:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	8f 7d       	andi	r24, 0xDF	; 223
 6e4:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret

000006ea <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 6ea:	83 b7       	in	r24, 0x33	; 51
 6ec:	81 60       	ori	r24, 0x01	; 1
 6ee:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 6f0:	83 b7       	in	r24, 0x33	; 51
 6f2:	8d 7f       	andi	r24, 0xFD	; 253
 6f4:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 6f6:	83 b7       	in	r24, 0x33	; 51
 6f8:	84 60       	ori	r24, 0x04	; 4
 6fa:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	08 95       	ret

00000700 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 700:	83 b7       	in	r24, 0x33	; 51
 702:	8e 7f       	andi	r24, 0xFE	; 254
 704:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 706:	83 b7       	in	r24, 0x33	; 51
 708:	8d 7f       	andi	r24, 0xFD	; 253
 70a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 70c:	83 b7       	in	r24, 0x33	; 51
 70e:	8b 7f       	andi	r24, 0xFB	; 251
 710:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret

00000716 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 716:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
 71a:	2f e6       	ldi	r18, 0x6F	; 111
 71c:	32 e1       	ldi	r19, 0x12	; 18
 71e:	43 e8       	ldi	r20, 0x83	; 131
 720:	51 e4       	ldi	r21, 0x41	; 65
 722:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__divsf3>
 726:	0e 94 4a 04 	call	0x894	; 0x894 <__fixunssfsi>
 72a:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <u32_gs_tmr0nuofovs>
 72e:	70 93 72 00 	sts	0x0072, r23	; 0x800072 <u32_gs_tmr0nuofovs+0x1>
 732:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u32_gs_tmr0nuofovs+0x2>
 736:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 73a:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 73c:	0e 94 75 03 	call	0x6ea	; 0x6ea <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 746:	0a c0       	rjmp	.+20     	; 0x75c <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 748:	08 b6       	in	r0, 0x38	; 56
 74a:	00 fe       	sbrs	r0, 0
 74c:	fd cf       	rjmp	.-6      	; 0x748 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 74e:	88 b7       	in	r24, 0x38	; 56
 750:	81 60       	ori	r24, 0x01	; 1
 752:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 754:	4f 5f       	subi	r20, 0xFF	; 255
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	6f 4f       	sbci	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 75c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u32_gs_tmr0nuofovs>
 760:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <u32_gs_tmr0nuofovs+0x1>
 764:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <u32_gs_tmr0nuofovs+0x2>
 768:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <u32_gs_tmr0nuofovs+0x3>
 76c:	48 17       	cp	r20, r24
 76e:	59 07       	cpc	r21, r25
 770:	6a 07       	cpc	r22, r26
 772:	7b 07       	cpc	r23, r27
 774:	48 f3       	brcs	.-46     	; 0x748 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 776:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u32_gs_tmr0nuofovs>
 77a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <u32_gs_tmr0nuofovs+0x1>
 77e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <u32_gs_tmr0nuofovs+0x2>
 782:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 786:	0e 94 80 03 	call	0x700	; 0x700 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret

0000078e <TMR1_start>:
	
	
	#endif
	
	return u32_a_ovs ;
}
 78e:	8e b5       	in	r24, 0x2e	; 46
 790:	81 60       	ori	r24, 0x01	; 1
 792:	8e bd       	out	0x2e, r24	; 46
 794:	8e b5       	in	r24, 0x2e	; 46
 796:	8d 7f       	andi	r24, 0xFD	; 253
 798:	8e bd       	out	0x2e, r24	; 46
 79a:	8e b5       	in	r24, 0x2e	; 46
 79c:	84 60       	ori	r24, 0x04	; 4
 79e:	8e bd       	out	0x2e, r24	; 46
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	08 95       	ret

000007a4 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
 7a4:	2c b5       	in	r18, 0x2c	; 44
 7a6:	3d b5       	in	r19, 0x2d	; 45
 7a8:	fc 01       	movw	r30, r24
 7aa:	31 83       	std	Z+1, r19	; 0x01
 7ac:	20 83       	st	Z, r18
 7ae:	08 95       	ret

000007b0 <__divsf3>:
 7b0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__divsf3x>
 7b4:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_round>
 7b8:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscB>
 7bc:	58 f0       	brcs	.+22     	; 0x7d4 <__divsf3+0x24>
 7be:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_pscA>
 7c2:	40 f0       	brcs	.+16     	; 0x7d4 <__divsf3+0x24>
 7c4:	29 f4       	brne	.+10     	; 0x7d0 <__divsf3+0x20>
 7c6:	5f 3f       	cpi	r21, 0xFF	; 255
 7c8:	29 f0       	breq	.+10     	; 0x7d4 <__divsf3+0x24>
 7ca:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_inf>
 7ce:	51 11       	cpse	r21, r1
 7d0:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_szero>
 7d4:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_nan>

000007d8 <__divsf3x>:
 7d8:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_split3>
 7dc:	68 f3       	brcs	.-38     	; 0x7b8 <__divsf3+0x8>

000007de <__divsf3_pse>:
 7de:	99 23       	and	r25, r25
 7e0:	b1 f3       	breq	.-20     	; 0x7ce <__divsf3+0x1e>
 7e2:	55 23       	and	r21, r21
 7e4:	91 f3       	breq	.-28     	; 0x7ca <__divsf3+0x1a>
 7e6:	95 1b       	sub	r25, r21
 7e8:	55 0b       	sbc	r21, r21
 7ea:	bb 27       	eor	r27, r27
 7ec:	aa 27       	eor	r26, r26
 7ee:	62 17       	cp	r22, r18
 7f0:	73 07       	cpc	r23, r19
 7f2:	84 07       	cpc	r24, r20
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	9f 5f       	subi	r25, 0xFF	; 255
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	22 0f       	add	r18, r18
 7fc:	33 1f       	adc	r19, r19
 7fe:	44 1f       	adc	r20, r20
 800:	aa 1f       	adc	r26, r26
 802:	a9 f3       	breq	.-22     	; 0x7ee <__divsf3_pse+0x10>
 804:	35 d0       	rcall	.+106    	; 0x870 <__stack+0x11>
 806:	0e 2e       	mov	r0, r30
 808:	3a f0       	brmi	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80a:	e0 e8       	ldi	r30, 0x80	; 128
 80c:	32 d0       	rcall	.+100    	; 0x872 <__stack+0x13>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	50 40       	sbci	r21, 0x00	; 0
 812:	e6 95       	lsr	r30
 814:	00 1c       	adc	r0, r0
 816:	ca f7       	brpl	.-14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 818:	2b d0       	rcall	.+86     	; 0x870 <__stack+0x11>
 81a:	fe 2f       	mov	r31, r30
 81c:	29 d0       	rcall	.+82     	; 0x870 <__stack+0x11>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	bb 1f       	adc	r27, r27
 826:	26 17       	cp	r18, r22
 828:	37 07       	cpc	r19, r23
 82a:	48 07       	cpc	r20, r24
 82c:	ab 07       	cpc	r26, r27
 82e:	b0 e8       	ldi	r27, 0x80	; 128
 830:	09 f0       	breq	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	bb 0b       	sbc	r27, r27
 834:	80 2d       	mov	r24, r0
 836:	bf 01       	movw	r22, r30
 838:	ff 27       	eor	r31, r31
 83a:	93 58       	subi	r25, 0x83	; 131
 83c:	5f 4f       	sbci	r21, 0xFF	; 255
 83e:	3a f0       	brmi	.+14     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 840:	9e 3f       	cpi	r25, 0xFE	; 254
 842:	51 05       	cpc	r21, r1
 844:	78 f0       	brcs	.+30     	; 0x864 <__stack+0x5>
 846:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_inf>
 84a:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__fp_szero>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	e4 f3       	brlt	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 852:	98 3e       	cpi	r25, 0xE8	; 232
 854:	d4 f3       	brlt	.-12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b7 95       	ror	r27
 85e:	f7 95       	ror	r31
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	c9 f7       	brne	.-14     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 864:	88 0f       	add	r24, r24
 866:	91 1d       	adc	r25, r1
 868:	96 95       	lsr	r25
 86a:	87 95       	ror	r24
 86c:	97 f9       	bld	r25, 7
 86e:	08 95       	ret
 870:	e1 e0       	ldi	r30, 0x01	; 1
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	bb 1f       	adc	r27, r27
 87a:	62 17       	cp	r22, r18
 87c:	73 07       	cpc	r23, r19
 87e:	84 07       	cpc	r24, r20
 880:	ba 07       	cpc	r27, r26
 882:	20 f0       	brcs	.+8      	; 0x88c <__stack+0x2d>
 884:	62 1b       	sub	r22, r18
 886:	73 0b       	sbc	r23, r19
 888:	84 0b       	sbc	r24, r20
 88a:	ba 0b       	sbc	r27, r26
 88c:	ee 1f       	adc	r30, r30
 88e:	88 f7       	brcc	.-30     	; 0x872 <__stack+0x13>
 890:	e0 95       	com	r30
 892:	08 95       	ret

00000894 <__fixunssfsi>:
 894:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fp_splitA>
 898:	88 f0       	brcs	.+34     	; 0x8bc <__fixunssfsi+0x28>
 89a:	9f 57       	subi	r25, 0x7F	; 127
 89c:	98 f0       	brcs	.+38     	; 0x8c4 <__fixunssfsi+0x30>
 89e:	b9 2f       	mov	r27, r25
 8a0:	99 27       	eor	r25, r25
 8a2:	b7 51       	subi	r27, 0x17	; 23
 8a4:	b0 f0       	brcs	.+44     	; 0x8d2 <__fixunssfsi+0x3e>
 8a6:	e1 f0       	breq	.+56     	; 0x8e0 <__fixunssfsi+0x4c>
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	1a f0       	brmi	.+6      	; 0x8b8 <__fixunssfsi+0x24>
 8b2:	ba 95       	dec	r27
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__fixunssfsi+0x14>
 8b6:	14 c0       	rjmp	.+40     	; 0x8e0 <__fixunssfsi+0x4c>
 8b8:	b1 30       	cpi	r27, 0x01	; 1
 8ba:	91 f0       	breq	.+36     	; 0x8e0 <__fixunssfsi+0x4c>
 8bc:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_zero>
 8c0:	b1 e0       	ldi	r27, 0x01	; 1
 8c2:	08 95       	ret
 8c4:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_zero>
 8c8:	67 2f       	mov	r22, r23
 8ca:	78 2f       	mov	r23, r24
 8cc:	88 27       	eor	r24, r24
 8ce:	b8 5f       	subi	r27, 0xF8	; 248
 8d0:	39 f0       	breq	.+14     	; 0x8e0 <__fixunssfsi+0x4c>
 8d2:	b9 3f       	cpi	r27, 0xF9	; 249
 8d4:	cc f3       	brlt	.-14     	; 0x8c8 <__fixunssfsi+0x34>
 8d6:	86 95       	lsr	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b3 95       	inc	r27
 8de:	d9 f7       	brne	.-10     	; 0x8d6 <__fixunssfsi+0x42>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__fixunssfsi+0x5c>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__floatunsisf>:
 8f2:	e8 94       	clt
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__floatsisf+0x12>

000008f6 <__floatsisf>:
 8f6:	97 fb       	bst	r25, 7
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__floatsisf+0x12>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	99 23       	and	r25, r25
 90a:	a9 f0       	breq	.+42     	; 0x936 <__floatsisf+0x40>
 90c:	f9 2f       	mov	r31, r25
 90e:	96 e9       	ldi	r25, 0x96	; 150
 910:	bb 27       	eor	r27, r27
 912:	93 95       	inc	r25
 914:	f6 95       	lsr	r31
 916:	87 95       	ror	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f1 11       	cpse	r31, r1
 920:	f8 cf       	rjmp	.-16     	; 0x912 <__floatsisf+0x1c>
 922:	fa f4       	brpl	.+62     	; 0x962 <__floatsisf+0x6c>
 924:	bb 0f       	add	r27, r27
 926:	11 f4       	brne	.+4      	; 0x92c <__floatsisf+0x36>
 928:	60 ff       	sbrs	r22, 0
 92a:	1b c0       	rjmp	.+54     	; 0x962 <__floatsisf+0x6c>
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	16 c0       	rjmp	.+44     	; 0x962 <__floatsisf+0x6c>
 936:	88 23       	and	r24, r24
 938:	11 f0       	breq	.+4      	; 0x93e <__floatsisf+0x48>
 93a:	96 e9       	ldi	r25, 0x96	; 150
 93c:	11 c0       	rjmp	.+34     	; 0x960 <__floatsisf+0x6a>
 93e:	77 23       	and	r23, r23
 940:	21 f0       	breq	.+8      	; 0x94a <__floatsisf+0x54>
 942:	9e e8       	ldi	r25, 0x8E	; 142
 944:	87 2f       	mov	r24, r23
 946:	76 2f       	mov	r23, r22
 948:	05 c0       	rjmp	.+10     	; 0x954 <__floatsisf+0x5e>
 94a:	66 23       	and	r22, r22
 94c:	71 f0       	breq	.+28     	; 0x96a <__floatsisf+0x74>
 94e:	96 e8       	ldi	r25, 0x86	; 134
 950:	86 2f       	mov	r24, r22
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	2a f0       	brmi	.+10     	; 0x962 <__floatsisf+0x6c>
 958:	9a 95       	dec	r25
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	da f7       	brpl	.-10     	; 0x958 <__floatsisf+0x62>
 962:	88 0f       	add	r24, r24
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <__fp_inf>:
 96c:	97 f9       	bld	r25, 7
 96e:	9f 67       	ori	r25, 0x7F	; 127
 970:	80 e8       	ldi	r24, 0x80	; 128
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	08 95       	ret

00000978 <__fp_nan>:
 978:	9f ef       	ldi	r25, 0xFF	; 255
 97a:	80 ec       	ldi	r24, 0xC0	; 192
 97c:	08 95       	ret

0000097e <__fp_pscA>:
 97e:	00 24       	eor	r0, r0
 980:	0a 94       	dec	r0
 982:	16 16       	cp	r1, r22
 984:	17 06       	cpc	r1, r23
 986:	18 06       	cpc	r1, r24
 988:	09 06       	cpc	r0, r25
 98a:	08 95       	ret

0000098c <__fp_pscB>:
 98c:	00 24       	eor	r0, r0
 98e:	0a 94       	dec	r0
 990:	12 16       	cp	r1, r18
 992:	13 06       	cpc	r1, r19
 994:	14 06       	cpc	r1, r20
 996:	05 06       	cpc	r0, r21
 998:	08 95       	ret

0000099a <__fp_round>:
 99a:	09 2e       	mov	r0, r25
 99c:	03 94       	inc	r0
 99e:	00 0c       	add	r0, r0
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <__fp_round+0xc>
 9a2:	88 23       	and	r24, r24
 9a4:	52 f0       	brmi	.+20     	; 0x9ba <__fp_round+0x20>
 9a6:	bb 0f       	add	r27, r27
 9a8:	40 f4       	brcc	.+16     	; 0x9ba <__fp_round+0x20>
 9aa:	bf 2b       	or	r27, r31
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__fp_round+0x18>
 9ae:	60 ff       	sbrs	r22, 0
 9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__fp_round+0x20>
 9b2:	6f 5f       	subi	r22, 0xFF	; 255
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	08 95       	ret

000009bc <__fp_split3>:
 9bc:	57 fd       	sbrc	r21, 7
 9be:	90 58       	subi	r25, 0x80	; 128
 9c0:	44 0f       	add	r20, r20
 9c2:	55 1f       	adc	r21, r21
 9c4:	59 f0       	breq	.+22     	; 0x9dc <__fp_splitA+0x10>
 9c6:	5f 3f       	cpi	r21, 0xFF	; 255
 9c8:	71 f0       	breq	.+28     	; 0x9e6 <__fp_splitA+0x1a>
 9ca:	47 95       	ror	r20

000009cc <__fp_splitA>:
 9cc:	88 0f       	add	r24, r24
 9ce:	97 fb       	bst	r25, 7
 9d0:	99 1f       	adc	r25, r25
 9d2:	61 f0       	breq	.+24     	; 0x9ec <__fp_splitA+0x20>
 9d4:	9f 3f       	cpi	r25, 0xFF	; 255
 9d6:	79 f0       	breq	.+30     	; 0x9f6 <__fp_splitA+0x2a>
 9d8:	87 95       	ror	r24
 9da:	08 95       	ret
 9dc:	12 16       	cp	r1, r18
 9de:	13 06       	cpc	r1, r19
 9e0:	14 06       	cpc	r1, r20
 9e2:	55 1f       	adc	r21, r21
 9e4:	f2 cf       	rjmp	.-28     	; 0x9ca <__fp_split3+0xe>
 9e6:	46 95       	lsr	r20
 9e8:	f1 df       	rcall	.-30     	; 0x9cc <__fp_splitA>
 9ea:	08 c0       	rjmp	.+16     	; 0x9fc <__fp_splitA+0x30>
 9ec:	16 16       	cp	r1, r22
 9ee:	17 06       	cpc	r1, r23
 9f0:	18 06       	cpc	r1, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	f1 cf       	rjmp	.-30     	; 0x9d8 <__fp_splitA+0xc>
 9f6:	86 95       	lsr	r24
 9f8:	71 05       	cpc	r23, r1
 9fa:	61 05       	cpc	r22, r1
 9fc:	08 94       	sec
 9fe:	08 95       	ret

00000a00 <__fp_zero>:
 a00:	e8 94       	clt

00000a02 <__fp_szero>:
 a02:	bb 27       	eor	r27, r27
 a04:	66 27       	eor	r22, r22
 a06:	77 27       	eor	r23, r23
 a08:	cb 01       	movw	r24, r22
 a0a:	97 f9       	bld	r25, 7
 a0c:	08 95       	ret

00000a0e <__divmodsi4>:
 a0e:	05 2e       	mov	r0, r21
 a10:	97 fb       	bst	r25, 7
 a12:	1e f4       	brtc	.+6      	; 0xa1a <__divmodsi4+0xc>
 a14:	00 94       	com	r0
 a16:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__negsi2>
 a1a:	57 fd       	sbrc	r21, 7
 a1c:	07 d0       	rcall	.+14     	; 0xa2c <__divmodsi4_neg2>
 a1e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__udivmodsi4>
 a22:	07 fc       	sbrc	r0, 7
 a24:	03 d0       	rcall	.+6      	; 0xa2c <__divmodsi4_neg2>
 a26:	4e f4       	brtc	.+18     	; 0xa3a <__divmodsi4_exit>
 a28:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__negsi2>

00000a2c <__divmodsi4_neg2>:
 a2c:	50 95       	com	r21
 a2e:	40 95       	com	r20
 a30:	30 95       	com	r19
 a32:	21 95       	neg	r18
 a34:	3f 4f       	sbci	r19, 0xFF	; 255
 a36:	4f 4f       	sbci	r20, 0xFF	; 255
 a38:	5f 4f       	sbci	r21, 0xFF	; 255

00000a3a <__divmodsi4_exit>:
 a3a:	08 95       	ret

00000a3c <__negsi2>:
 a3c:	90 95       	com	r25
 a3e:	80 95       	com	r24
 a40:	70 95       	com	r23
 a42:	61 95       	neg	r22
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	08 95       	ret

00000a4c <__udivmodsi4>:
 a4c:	a1 e2       	ldi	r26, 0x21	; 33
 a4e:	1a 2e       	mov	r1, r26
 a50:	aa 1b       	sub	r26, r26
 a52:	bb 1b       	sub	r27, r27
 a54:	fd 01       	movw	r30, r26
 a56:	0d c0       	rjmp	.+26     	; 0xa72 <__udivmodsi4_ep>

00000a58 <__udivmodsi4_loop>:
 a58:	aa 1f       	adc	r26, r26
 a5a:	bb 1f       	adc	r27, r27
 a5c:	ee 1f       	adc	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	a2 17       	cp	r26, r18
 a62:	b3 07       	cpc	r27, r19
 a64:	e4 07       	cpc	r30, r20
 a66:	f5 07       	cpc	r31, r21
 a68:	20 f0       	brcs	.+8      	; 0xa72 <__udivmodsi4_ep>
 a6a:	a2 1b       	sub	r26, r18
 a6c:	b3 0b       	sbc	r27, r19
 a6e:	e4 0b       	sbc	r30, r20
 a70:	f5 0b       	sbc	r31, r21

00000a72 <__udivmodsi4_ep>:
 a72:	66 1f       	adc	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	99 1f       	adc	r25, r25
 a7a:	1a 94       	dec	r1
 a7c:	69 f7       	brne	.-38     	; 0xa58 <__udivmodsi4_loop>
 a7e:	60 95       	com	r22
 a80:	70 95       	com	r23
 a82:	80 95       	com	r24
 a84:	90 95       	com	r25
 a86:	9b 01       	movw	r18, r22
 a88:	ac 01       	movw	r20, r24
 a8a:	bd 01       	movw	r22, r26
 a8c:	cf 01       	movw	r24, r30
 a8e:	08 95       	ret

00000a90 <_exit>:
 a90:	f8 94       	cli

00000a92 <__stop_program>:
 a92:	ff cf       	rjmp	.-2      	; 0xa92 <__stop_program>
